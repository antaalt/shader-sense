{"types":[{"label":"bool","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type bool","parameters":[{"ty":"bool","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"conditional type, values may be either true or false","link":null}}},{"label":"int","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type int","parameters":[{"ty":"int","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":" a signed, two's complement, 32-bit integer","link":null}}},{"label":"uint","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type uint","parameters":[{"ty":"uint","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":" an unsigned 32-bit integer","link":null}}},{"label":"float","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type float","parameters":[{"ty":"float","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"an IEEE-754 single-precision floating point number","link":null}}},{"label":"double","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type double","parameters":[{"ty":"double","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"an IEEE-754 double-precision floating-point number","link":null}}},{"label":"bvec2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type bvec2","parameters":[{"ty":"bvec2","label":"value","count":null,"description":""}]},{"returnType":"bvec2","description":"Constructor for type bvec2","parameters":[{"ty":"bool","label":"x","count":null,"description":""},{"ty":"bool","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 2 components of booleans","link":null}}},{"label":"ivec2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type ivec2","parameters":[{"ty":"ivec2","label":"value","count":null,"description":""}]},{"returnType":"ivec2","description":"Constructor for type ivec2","parameters":[{"ty":"int","label":"x","count":null,"description":""},{"ty":"int","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 2 components of signed integers","link":null}}},{"label":"uvec2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type uvec2","parameters":[{"ty":"uvec2","label":"value","count":null,"description":""}]},{"returnType":"uvec2","description":"Constructor for type uvec2","parameters":[{"ty":"uint","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 2 components of unsigned integers","link":null}}},{"label":"vec2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type vec2","parameters":[{"ty":"vec2","label":"value","count":null,"description":""}]},{"returnType":"vec2","description":"Constructor for type vec2","parameters":[{"ty":"float","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 2 components of single-precision floating-point numbers","link":null}}},{"label":"dvec2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dvec2","parameters":[{"ty":"dvec2","label":"value","count":null,"description":""}]},{"returnType":"dvec2","description":"Constructor for type dvec2","parameters":[{"ty":"double","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 2 components of double-precision floating-point numbers","link":null}}},{"label":"mat2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat2","parameters":[{"ty":"mat2","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat2","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns & rows of single-precision floating-point numbers","link":null}}},{"label":"dmat2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat2","parameters":[{"ty":"dmat2","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat2","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns & rows of double-precision floating-point numbers","link":null}}},{"label":"mat2x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat2x2","parameters":[{"ty":"mat2x2","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat2x2","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 2 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat2x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat2x2","parameters":[{"ty":"dmat2x2","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat2x2","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 2 rows of double-precision floating-point numbers","link":null}}},{"label":"mat2x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat2x3","parameters":[{"ty":"mat2x3","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat2x3","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 3 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat2x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat2x3","parameters":[{"ty":"dmat2x3","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat2x3","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 3 rows of double-precision floating-point numbers","link":null}}},{"label":"mat2x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat2x4","parameters":[{"ty":"mat2x4","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat2x4","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m03","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m13","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 4 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat2x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat2x4","parameters":[{"ty":"dmat2x4","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat2x4","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m03","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m13","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 2 columns and 4 rows of double-precision floating-point numbers","link":null}}},{"label":"bvec3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type bvec3","parameters":[{"ty":"bvec3","label":"value","count":null,"description":""}]},{"returnType":"bvec3","description":"Constructor for type bvec3","parameters":[{"ty":"bool","label":"x","count":null,"description":""},{"ty":"bool","label":"y","count":null,"description":""},{"ty":"bool","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 3 components of booleans","link":null}}},{"label":"ivec3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type ivec3","parameters":[{"ty":"ivec3","label":"value","count":null,"description":""}]},{"returnType":"ivec3","description":"Constructor for type ivec3","parameters":[{"ty":"int","label":"x","count":null,"description":""},{"ty":"int","label":"y","count":null,"description":""},{"ty":"int","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 3 components of signed integers","link":null}}},{"label":"uvec3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type uvec3","parameters":[{"ty":"uvec3","label":"value","count":null,"description":""}]},{"returnType":"uvec3","description":"Constructor for type uvec3","parameters":[{"ty":"uint","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""},{"ty":"uint","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 3 components of unsigned integers","link":null}}},{"label":"vec3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type vec3","parameters":[{"ty":"vec3","label":"value","count":null,"description":""}]},{"returnType":"vec3","description":"Constructor for type vec3","parameters":[{"ty":"float","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""},{"ty":"float","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 3 components of single-precision floating-point numbers","link":null}}},{"label":"dvec3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dvec3","parameters":[{"ty":"dvec3","label":"value","count":null,"description":""}]},{"returnType":"dvec3","description":"Constructor for type dvec3","parameters":[{"ty":"double","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""},{"ty":"double","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 3 components of double-precision floating-point numbers","link":null}}},{"label":"mat3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat3","parameters":[{"ty":"mat3","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat3","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns & rows of single-precision floating-point numbers","link":null}}},{"label":"dmat3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat3","parameters":[{"ty":"dmat3","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat3","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns & rows of double-precision floating-point numbers","link":null}}},{"label":"mat3x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat3x2","parameters":[{"ty":"mat3x2","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat3x2","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 2 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat3x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat3x2","parameters":[{"ty":"dmat3x2","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat3x2","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 2 rows of double-precision floating-point numbers","link":null}}},{"label":"mat3x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat3x3","parameters":[{"ty":"mat3x3","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat3x3","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 3 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat3x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat3x3","parameters":[{"ty":"dmat3x3","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat3x3","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 3 rows of double-precision floating-point numbers","link":null}}},{"label":"mat3x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat3x4","parameters":[{"ty":"mat3x4","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat3x4","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m03","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m13","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""},{"ty":"float","label":"m23","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 4 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat3x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat3x4","parameters":[{"ty":"dmat3x4","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat3x4","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m03","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m13","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""},{"ty":"double","label":"m23","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 3 columns and 4 rows of double-precision floating-point numbers","link":null}}},{"label":"bvec4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type bvec4","parameters":[{"ty":"bvec4","label":"value","count":null,"description":""}]},{"returnType":"bvec4","description":"Constructor for type bvec4","parameters":[{"ty":"bool","label":"x","count":null,"description":""},{"ty":"bool","label":"y","count":null,"description":""},{"ty":"bool","label":"z","count":null,"description":""},{"ty":"bool","label":"w","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 4 components of booleans","link":null}}},{"label":"ivec4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type ivec4","parameters":[{"ty":"ivec4","label":"value","count":null,"description":""}]},{"returnType":"ivec4","description":"Constructor for type ivec4","parameters":[{"ty":"int","label":"x","count":null,"description":""},{"ty":"int","label":"y","count":null,"description":""},{"ty":"int","label":"z","count":null,"description":""},{"ty":"int","label":"w","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 4 components of signed integers","link":null}}},{"label":"uvec4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type uvec4","parameters":[{"ty":"uvec4","label":"value","count":null,"description":""}]},{"returnType":"uvec4","description":"Constructor for type uvec4","parameters":[{"ty":"uint","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""},{"ty":"uint","label":"z","count":null,"description":""},{"ty":"uint","label":"w","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 4 components of unsigned integers","link":null}}},{"label":"vec4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type vec4","parameters":[{"ty":"vec4","label":"value","count":null,"description":""}]},{"returnType":"vec4","description":"Constructor for type vec4","parameters":[{"ty":"float","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""},{"ty":"float","label":"z","count":null,"description":""},{"ty":"float","label":"w","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 4 components of single-precision floating-point numbers","link":null}}},{"label":"dvec4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dvec4","parameters":[{"ty":"dvec4","label":"value","count":null,"description":""}]},{"returnType":"dvec4","description":"Constructor for type dvec4","parameters":[{"ty":"double","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""},{"ty":"double","label":"z","count":null,"description":""},{"ty":"double","label":"w","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Vector with 4 components of double-precision floating-point numbers","link":null}}},{"label":"mat4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat4","parameters":[{"ty":"mat4","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat4","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m03","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m13","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""},{"ty":"float","label":"m23","count":null,"description":""},{"ty":"float","label":"m30","count":null,"description":""},{"ty":"float","label":"m31","count":null,"description":""},{"ty":"float","label":"m32","count":null,"description":""},{"ty":"float","label":"m33","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns & rows of single-precision floating-point numbers","link":null}}},{"label":"dmat4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat4","parameters":[{"ty":"dmat4","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat4","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m03","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m13","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""},{"ty":"double","label":"m23","count":null,"description":""},{"ty":"double","label":"m30","count":null,"description":""},{"ty":"double","label":"m31","count":null,"description":""},{"ty":"double","label":"m32","count":null,"description":""},{"ty":"double","label":"m33","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns & rows of double-precision floating-point numbers","link":null}}},{"label":"mat4x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat4x2","parameters":[{"ty":"mat4x2","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat4x2","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m30","count":null,"description":""},{"ty":"float","label":"m31","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 2 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat4x2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat4x2","parameters":[{"ty":"dmat4x2","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat4x2","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m30","count":null,"description":""},{"ty":"double","label":"m31","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 2 rows of double-precision floating-point numbers","link":null}}},{"label":"mat4x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat4x3","parameters":[{"ty":"mat4x3","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat4x3","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""},{"ty":"float","label":"m30","count":null,"description":""},{"ty":"float","label":"m31","count":null,"description":""},{"ty":"float","label":"m32","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 3 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat4x3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat4x3","parameters":[{"ty":"dmat4x3","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat4x3","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""},{"ty":"double","label":"m30","count":null,"description":""},{"ty":"double","label":"m31","count":null,"description":""},{"ty":"double","label":"m32","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 3 rows of double-precision floating-point numbers","link":null}}},{"label":"mat4x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type mat4x4","parameters":[{"ty":"mat4x4","label":"value","count":null,"description":""}]},{"returnType":"float","description":"Constructor for type mat4x4","parameters":[{"ty":"float","label":"m00","count":null,"description":""},{"ty":"float","label":"m01","count":null,"description":""},{"ty":"float","label":"m02","count":null,"description":""},{"ty":"float","label":"m03","count":null,"description":""},{"ty":"float","label":"m10","count":null,"description":""},{"ty":"float","label":"m11","count":null,"description":""},{"ty":"float","label":"m12","count":null,"description":""},{"ty":"float","label":"m13","count":null,"description":""},{"ty":"float","label":"m20","count":null,"description":""},{"ty":"float","label":"m21","count":null,"description":""},{"ty":"float","label":"m22","count":null,"description":""},{"ty":"float","label":"m23","count":null,"description":""},{"ty":"float","label":"m30","count":null,"description":""},{"ty":"float","label":"m31","count":null,"description":""},{"ty":"float","label":"m32","count":null,"description":""},{"ty":"float","label":"m33","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 4 rows of single-precision floating-point numbers","link":null}}},{"label":"dmat4x4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type dmat4x4","parameters":[{"ty":"dmat4x4","label":"value","count":null,"description":""}]},{"returnType":"double","description":"Constructor for type dmat4x4","parameters":[{"ty":"double","label":"m00","count":null,"description":""},{"ty":"double","label":"m01","count":null,"description":""},{"ty":"double","label":"m02","count":null,"description":""},{"ty":"double","label":"m03","count":null,"description":""},{"ty":"double","label":"m10","count":null,"description":""},{"ty":"double","label":"m11","count":null,"description":""},{"ty":"double","label":"m12","count":null,"description":""},{"ty":"double","label":"m13","count":null,"description":""},{"ty":"double","label":"m20","count":null,"description":""},{"ty":"double","label":"m21","count":null,"description":""},{"ty":"double","label":"m22","count":null,"description":""},{"ty":"double","label":"m23","count":null,"description":""},{"ty":"double","label":"m30","count":null,"description":""},{"ty":"double","label":"m31","count":null,"description":""},{"ty":"double","label":"m32","count":null,"description":""},{"ty":"double","label":"m33","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Matrice with 4 columns and 4 rows of double-precision floating-point numbers","link":null}}},{"label":"sampler1D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler1D","parameters":[{"ty":"sampler1D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture1D","link":null}}},{"label":"isampler1D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler1D","parameters":[{"ty":"isampler1D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture1D","link":null}}},{"label":"usampler1D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler1D","parameters":[{"ty":"usampler1D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture1D","link":null}}},{"label":"sampler2D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2D","parameters":[{"ty":"sampler2D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture2D","link":null}}},{"label":"isampler2D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler2D","parameters":[{"ty":"isampler2D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture2D","link":null}}},{"label":"usampler2D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler2D","parameters":[{"ty":"usampler2D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture2D","link":null}}},{"label":"sampler3D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler3D","parameters":[{"ty":"sampler3D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture3D","link":null}}},{"label":"isampler3D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler3D","parameters":[{"ty":"isampler3D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture3D","link":null}}},{"label":"usampler3D","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler3D","parameters":[{"ty":"usampler3D","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture3D","link":null}}},{"label":"samplerCube","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type samplerCube","parameters":[{"ty":"samplerCube","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for TextureCube","link":null}}},{"label":"isamplerCube","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isamplerCube","parameters":[{"ty":"isamplerCube","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for TextureCube","link":null}}},{"label":"usamplerCube","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usamplerCube","parameters":[{"ty":"usamplerCube","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for TextureCube","link":null}}},{"label":"sampler2DRect","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DRect","parameters":[{"ty":"sampler2DRect","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture2DRect","link":null}}},{"label":"isampler2DRect","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler2DRect","parameters":[{"ty":"isampler2DRect","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture2DRect","link":null}}},{"label":"usampler2DRect","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler2DRect","parameters":[{"ty":"usampler2DRect","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture2DRect","link":null}}},{"label":"sampler1DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler1DArray","parameters":[{"ty":"sampler1DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture1DArray","link":null}}},{"label":"isampler1DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler1DArray","parameters":[{"ty":"isampler1DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture1DArray","link":null}}},{"label":"usampler1DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler1DArray","parameters":[{"ty":"usampler1DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture1DArray","link":null}}},{"label":"sampler2DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DArray","parameters":[{"ty":"sampler2DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture2DArray","link":null}}},{"label":"isampler2DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler2DArray","parameters":[{"ty":"isampler2DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture2DArray","link":null}}},{"label":"usampler2DArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler2DArray","parameters":[{"ty":"usampler2DArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture2DArray","link":null}}},{"label":"samplerCubeArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type samplerCubeArray","parameters":[{"ty":"samplerCubeArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for TextureCubeArray","link":null}}},{"label":"isamplerCubeArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isamplerCubeArray","parameters":[{"ty":"isamplerCubeArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for TextureCubeArray","link":null}}},{"label":"usamplerCubeArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usamplerCubeArray","parameters":[{"ty":"usamplerCubeArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for TextureCubeArray","link":null}}},{"label":"samplerBuffer","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type samplerBuffer","parameters":[{"ty":"samplerBuffer","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for TextureBuffer","link":null}}},{"label":"isamplerBuffer","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isamplerBuffer","parameters":[{"ty":"isamplerBuffer","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for TextureBuffer","link":null}}},{"label":"usamplerBuffer","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usamplerBuffer","parameters":[{"ty":"usamplerBuffer","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for TextureBuffer","link":null}}},{"label":"sampler2DMS","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DMS","parameters":[{"ty":"sampler2DMS","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture2DMS","link":null}}},{"label":"isampler2DMS","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler2DMS","parameters":[{"ty":"isampler2DMS","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture2DMS","link":null}}},{"label":"usampler2DMS","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler2DMS","parameters":[{"ty":"usampler2DMS","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture2DMS","link":null}}},{"label":"sampler2DMSArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DMSArray","parameters":[{"ty":"sampler2DMSArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Floating-point sampler for Texture2DMSArray","link":null}}},{"label":"isampler2DMSArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type isampler2DMSArray","parameters":[{"ty":"isampler2DMSArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Signed integer sampler for Texture2DMSArray","link":null}}},{"label":"usampler2DMSArray","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type usampler2DMSArray","parameters":[{"ty":"usampler2DMSArray","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Unsigned integer sampler for Texture2DMSArray","link":null}}},{"label":"sampler1DShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler1DShadow","parameters":[{"ty":"sampler1DShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for Texture1D","link":null}}},{"label":"sampler2DShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DShadow","parameters":[{"ty":"sampler2DShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for Texture2D","link":null}}},{"label":"samplerCubeShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type samplerCubeShadow","parameters":[{"ty":"samplerCubeShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for TextureCube","link":null}}},{"label":"sampler2DRectShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DRectShadow","parameters":[{"ty":"sampler2DRectShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for Texture2DRect","link":null}}},{"label":"sampler1DArrayShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler1DArrayShadow","parameters":[{"ty":"sampler1DArrayShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for Texture1DArray","link":null}}},{"label":"sampler2DArrayShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type sampler2DArrayShadow","parameters":[{"ty":"sampler2DArrayShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for Texture2DArray","link":null}}},{"label":"samplerCubeArrayShadow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type samplerCubeArrayShadow","parameters":[{"ty":"samplerCubeArrayShadow","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Shadow sampler for TextureCubeArray","link":null}}},{"label":"atomic_uint","requirement":{"Glsl":{"stages":null,"min_version":460,"extension":null}},"data":{"Types":{"constructors":[{"returnType":"","description":"Constructor for type atomic_uint","parameters":[{"ty":"atomic_uint","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"An Atomic Counter is a GLSL variable type whose storage comes from a Buffer Object. Atomic counters, as the name suggests, can have atomic memory operations performed on them. They can be thought of as a very limited form of buffer image variable.","link":null}}},{"label":"gl_MeshPerVertexEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Struct":{"constructors":[],"members":[{"context":"gl_MeshPerVertexEXT","parameters":{"ty":"vec4","label":"gl_Position","count":null,"description":""}},{"context":"gl_MeshPerVertexEXT","parameters":{"ty":"float","label":"gl_PointSize","count":null,"description":""}},{"context":"gl_MeshPerVertexEXT","parameters":{"ty":"float","label":"gl_ClipDistance","count":"Unsized","description":""}},{"context":"gl_MeshPerVertexEXT","parameters":{"ty":"float","label":"gl_CullDistance","count":"Unsized","description":""}}],"methods":[]}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_MeshPerPrimitiveEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Struct":{"constructors":[],"members":[{"context":"gl_MeshPerPrimitiveEXT","parameters":{"ty":"int","label":"gl_PrimitiveID","count":null,"description":""}},{"context":"gl_MeshPerPrimitiveEXT","parameters":{"ty":"int","label":"gl_Layer","count":null,"description":""}},{"context":"gl_MeshPerPrimitiveEXT","parameters":{"ty":"int","label":"gl_ViewportIndex","count":"Unsized","description":""}},{"context":"gl_MeshPerPrimitiveEXT","parameters":{"ty":"bool","label":"gl_CullPrimitiveEXT","count":"Unsized","description":""}},{"context":"gl_MeshPerPrimitiveEXT","parameters":{"ty":"int","label":"gl_PrimitiveShadingRateEXT","count":"Unsized","description":""}}],"methods":[]}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}}],"constants":[{"label":"gl_ClipDistance[]","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Variables":{"ty":"float","count":null}},"mode":{"Intrinsic":{"description":"The gl_ClipDistance variable provides a forward compatible mechanism for controlling user clipping. The element gl_ClipDistance [ i ] specifies a clip distance for each user clip plane i . A distance of 0.0 means that the vertex is on the plane, a positive distance means that the vertex is inside the clip plane, and a negative distance means that the point is outside the clip plane. The clip distances will be linearly interpolated across the primitive and the portion of the primitive with interpolated distances less than 0.0 will be clipped.The gl_ClipDistance array is initially predeclared as unsized and must be sized by the shader either by redeclaring it with an explicit size, or by indexing it with only integral constant expressions. The array must be sized to include all clip planes that are enabled via the OpenGL API; if the size does not include all enabled planes, results are undefined. The size may be at most gl_MaxClipDistances . The number of varying components consumed by gl_ClipDistance will match the size of the array, no matter how many planes are enabled. The shader must also set all values in gl_ClipDistance that have been enabled via the OpenGL API, or results are undefined. Values written into gl_ClipDistance planes that are not enabled have no effect.In the vertex, tessellation evaluation and geometry languages, a single global instance of the gl_PerVertex named block is available and its gl_ClipDistance member is an output that receives the clip distances for the current vertex. It may be written at any time during shader execution. The value written to gl_ClipDistance will be used by primitive assembly, clipping, culling and other fixed functionality operations, if present, that operate on primitives after vertex processing has occurred.In the tessellation control language, the gl_PerVertex named block is used to construct an array, gl_out[] , whose gl_ClipDistance members hold clip distances for each of the control points, which become available as inputs to the subsequent tessellation evaluation shader.The value of gl_ClipDistance (or the gl_ClipDistance member of the gl_out[] array, in the case of the tessellation control shader) is undefined after the vertex, tessellation control, and tessellation evaluation shading stages if the corresponding shader executable does not write to gl_ClipDistance. It is also undefined after the geometry processing stage if the geometry shader executable calls EmitVertex without having written gl_ClipDistance since the last call to EmitVertex (or hasn't written it at all).In the tessellation control, tessellation evaluation and geoemetry languages, the gl_PerVertex named block is used to construct an array, gl_in[] of per-vertex or per-control point inputs whose content represents the corresponding outputs written by the previous stage. Only elements of the gl_ClipDistance array that correspond to enabled clip planes have defined values.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_ClipDistance.xhtml"}}},{"label":"gl_CullDistance[]","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Variables":{"ty":"float","count":null}},"mode":{"Intrinsic":{"description":"The gl_CullDistance variable provides a mechanism for controlling user culling. The element gl_CullDistance [ i ] specifies a cull distance for each plane i . A distance of 0.0 means that the vertex is on the plane, a positive distance means that the vertex is inside the cull volume, and a negative distance means that the point is outside the cull volume. Primitives whose vertices all have a negative clip distance for plane i will be discarded.The gl_CullDistance array is predeclared as unsized and must be sized by the shader either by redeclaring it with an size or by indexing it only with integral constant expressions. The size determines the number and set of enabled cull distances and can be at most gl_MaxCullDistances . The number of varying components consumed by gl_CullDistance will match the size of the array. Shaders writing gl_CullDistance must write all enabled distances, or culling results are undefined.As an output variable, gl_CullDistance provides the place for the shader to write these distances. As an input in all but the fragment language, it reads the values written in the previous shader stage. In the fragment language, the gl_CullDistance array contains linearly interpolated values for the vertex values written by a shader to the gl_CullDistance vertex output variable.It is a compile-time or link-time error for the set of shaders forming a program to have the sum of the sizes of the gl_ClipDistance and gl_CullDistance arrays to be larger than gl_MaxCombinedClipAndCullDistances .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_CullDistance.xhtml"}}},{"label":"gl_FragCoord","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Variables":{"ty":"vec4","count":null}},"mode":{"Intrinsic":{"description":"Available only in the fragment language, gl_FragCoord is an input variable that contains the window relative coordinate (x, y, z, 1/w) values for the fragment. If multi-sampling, this value can be for any location within the pixel, or one of the fragment samples. This value is the result of fixed functionality that interpolates primitives after vertex processing to generate fragments. The z component is the depth value that would be used for the fragment's depth if no shader contained any writes to gl_FragDepth .gl_FragCoord may be redeclared with the additional layout qualifier identifiers origin_upper_left or pixel_center_integer . By default, gl_FragCoord assumes a lower-left origin for window coordinates and assumes pixel centers are located at half-pixel centers. For example, the (x, y) location (0.5, 0.5) is returned for the lower-left-most pixel in a window. The origin of gl_FragCoord may be changed by redeclaring gl_FragCoord with the origin_upper_left identifier. The values returned can also be shifted by half a pixel in both x and y by pixel_center_integer so it appears the pixels are centered at whole number pixel offsets. This moves the (x, y) value returned by gl_FragCoord of (0.5, 0.5) by default to (0.0, 0.0) with pixel_center_integer .If gl_FragCoord is redeclared in any fragment shader in a program, it must be redeclared in all fragment shaders in that program that have static use of gl_FragCoord . Redeclaring gl_FragCoord with any accepted qualifier affects only gl_FragCoord.x and gl_FragCoord.y . It has no effect on rasterization, transformation or any other part of the OpenGL pipeline or language features.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_FragCoord.xhtml"}}},{"label":"gl_FrontFacing","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Variables":{"ty":"bool","count":null}},"mode":{"Intrinsic":{"description":"Available only in the fragment language, gl_FrontFacing is an input variable whose value is true if the fragment belongs to a front-facing primitive and false otherwise. The determination of whether a triangle primitive is front-facing is made by examining the sign of the area of the triangle, including a possible reversal of this sign as controlled by glFrontFace . One way to compute this area is:a = 1 2 ∑ j = 0 n - 1 x w i y w i + 1 - x w i + 1 y w iwhere x w i and y w i are the x and y window coordinates of the i th vertex of the n-vertex polygon.The sign of this computation is negated when the value of GL_CLIP_ORIGIN (the clip volume origin, set with glClipControl ) is GL_UPPER_LEFT .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_FrontFacing.xhtml"}}},{"label":"gl_GlobalInvocationID","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uvec3","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_GlobalInvocationID is a derived input variable containing the n-dimensional index of the work invocation within the global work group that the current shader is executing on. The value of gl_GlobalInvocationID is equal to gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_GlobalInvocationID.xhtml"}}},{"label":"gl_HelperInvocation","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Variables":{"ty":"bool","count":null}},"mode":{"Intrinsic":{"description":"The value gl_HelperInvocation is true if the fragment shader invocation is considered a helper invocation and is false otherwise. A helper invocation is a fragment-shader invocation that is created solely for the purposes of evaluating derivatives for use in non-helper fragment-shader invocations. Such derivatives are computed implicitly in the built-in function texture (), and explicitly in the derivative functions dFdx () and dFdy .Fragment shader helper invocations execute the same shader code as non-helper invocations, but will not have side effects that modify the framebuffer or other shader-accessible memory. In particular: Fragments corresponding to helper invocations are discarded when shader execution is complete, without updating the framebuffer. Stores to image and buffer variables performed by helper invocations have no effect on the underlying image or buffer memory. Atomic operations to image, buffer, or atomic counter variables performed by helper invocations have no effect on the underlying image or buffer memory. The values returned by such atomic operations are undefined.\n            Helper invocations may be generated for pixels not covered by a\n            primitive being rendered. While fragment shader inputs qualified\n            with centroid are normally required to be sampled in the\n            intersection of the pixel and the primitive, the requirement is\n            ignored for such pixels since there is no intersection between\n            the pixel and primitive.\n        \n            Helper invocations may also be generated for fragments that are\n            covered by a primitive being rendered when the fragment is\n            killed by early fragment tests (using the early_fragment_tests\n            qualifier) or where the implementation is able to determine that\n            executing the fragment shader would have no effect other than\n            assisting in computing derivatives for other fragment shader\n            invocations.\n        \n            The set of helper invocations generated when processing any set\n            of primitives is implementation dependent.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_HelperInvocation.xhtml"}}},{"label":"gl_InstanceID","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_InstanceID is a vertex language input variable that holds the integer index of the current primitive in an instanced draw command such as glDrawArraysInstanced . If the current primitive does not originate from an instanced draw command, the value of gl_InstanceID is zero.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_InstanceID.xhtml"}}},{"label":"gl_InvocationID","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"In the tessellation control language, gl_InvocationID contains the index of the output patch vertex assigned to the shader invocation. It is assigned an integer value in the range [0, N-1] where N is the number of output patch vertices.In the geometry language, gl_InvocationID identifies the invocation number assigned to the geometry shader invocation. It is assigned an integer value in the range [0, N-1] where N is the number of geometry shader invocations per primitive.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_InvocationID.xhtml"}}},{"label":"gl_Layer","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"In the geometry language, gl_Layer is used to select a specific layer (or face and layer of cube map) in a multi-layer framebuffer attachment. The actual layer used will come from one of the vertices in the primitive being shaded. Which vertex the layer comes from is undefined and as such it is recommended to write the same value to gl_Layer for all vertices in the primitive. If a shader statically assigns a value to gl_Layer , layered rendering mode is enabled. If a shader statically assigns a value to gl_Layer , and there is an execution path through the shader that does not set gl_Layer , then the value of gl_Layer is undefined for invocations of the shader that take that path.When used with an array of cube map textures, the gl_Layer output variable takes on a special value. Instead of referring to only the layer, it is used to select a cube map face and a layer. Setting gl_Layer to the value layer * 6 + face will render to face of the cube defined in layer . The face values are as follows: Face Value Resulting Target 0 GL_TEXTURE_CUBEMAP_POSITIVE_X 1 GL_TEXTURE_CUBEMAP_NEGATIVE_X 2 GL_TEXTURE_CUBEMAP_POSITIVE_Y 3 GL_TEXTURE_CUBEMAP_NEGATIVE_Y 4 GL_TEXTURE_CUBEMAP_POSITIVE_Z 5 GL_TEXTURE_CUBEMAP_NEGATIVE_ZFor example, to render to the positive y cube map face located in the 5 th layer of the cube map array, gl_Layer should be set to 5 * 6 + 2 .The input variable gl_Layer in the fragment language will have the same value that was written to the output variable gl_Layer in the geometry language. If the geometry stage does not dynamically assign a value to gl_Layer , the value of gl_Layer in the fragment stage will be undefined. If the geometry stage makes no static assignment to gl_Layer , the input gl_Layer in the fragment stage will be zero. Otherwise, the fragment stage will read the same value written by the geometry stage, even if that value is out of range. If a fragment shader contains a static access to gl_Layer , it will count against the implementation defined limit for the maximum number of inputs to the fragment stage.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_Layer.xhtml"}}},{"label":"gl_LocalInvocationID","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uvec3","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_LocalInvocationID is an input variable containing the n-dimensional index of the local work invocation within the work group that the current shader is executing in. The possible values for this variable range across the local work group size, i.e., (0,0,0) to ( gl_WorkGroupSize.x - 1, gl_WorkGroupSize.y - 1, gl_WorkGroupSize.z - 1).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_LocalInvocationID.xhtml"}}},{"label":"gl_LocalInvocationIndex","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uint","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_LocalInvocationIndex is a derived input variable containing the 1-dimensional linearized index of the work invocation within the work group that the current shader is executing on. The value of gl_LocalInvocationIndex is equal to gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_LocalInvocationIndex.xhtml"}}},{"label":"gl_NumSamples","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"bool","count":null}},"mode":{"Intrinsic":{"description":"gl_NumSamples is a fragment language input variable that contains the number of samples in the framebuffer, or 1 if rendering to a non-multisample framebuffer. gl_NumSamples is the sample count of the framebuffer regardless of whether multisample rasterization is enabled or not.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_NumSamples.xhtml"}}},{"label":"gl_NumWorkGroups","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uvec3","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_NumWorkGroups contains the total number of work groups that will execute the compute shader. The components of gl_NumWorkGroups are equal to the num_groups_x , num_groups_y , and num_groups_z parameters passed to the glDispatchCompute command.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_NumWorkGroups.xhtml"}}},{"label":"gl_PatchVerticesIn","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"Available only in the tessellation control and evaluation languages, gl_PatchVerticesIn contains the number of vertices in the input being processed by the shader. A single tessellation control or evaluation shader can read patches of differing sizes, and so th value of gl_PatchVertexIn may differ between patches.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_PatchVerticesIn.xhtml"}}},{"label":"gl_PointCoord","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Variables":{"ty":"vec2","count":null}},"mode":{"Intrinsic":{"description":"gl_PointCoord is a fragment language input variable that contains the two-dimensional coordinates indicating where within a point primitive the current fragment is located. If the current primitive is not a point, then values read from gl_PointCoord are undefined.gl_PointCoord.s ranges from 0.0 to 1.0 across the point horizontally from left to right. If GL_POINT_SPRITE_COORD_ORIGIN is GL_LOWER_LEFT , gl_PointCoord.t varies from 0.0 to 1.0 vertically from bottom to top. Otherwise, if GL_POINT_SPRITE_COORD_ORIGIN is GL_UPPER_LEFT then gl_PointCoord.t varies from 0.0 to 1.0 vertically from top to bottom. The default value of GL_POINT_SPRITE_COORD_ORIGIN is GL_UPPER_LEFT .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_PointCoord.xhtml"}}},{"label":"gl_PointSize","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"vec4","count":null}},"mode":{"Intrinsic":{"description":"In the vertex, tessellation evaluation and geometry languages, a single global instance of the gl_PerVertex named block is available and its gl_PointSize member is an output that receives the intended size of the point to be rasterized, in pixels. It may be written at any time during shader execution. If GL_PROGRAM_POINT_SIZE is enabled, gl_PointSize is used to determine the size of rasterized points, otherwise it is ignored by the rasterization stage.In the tessellation control language, the gl_PerVertex named block is used to construct an array, gl_out[] , whose members become available as inputs to the subsequent tessellation evaluation shader.The value of gl_PointSize (or the gl_PointSize member of the gl_out[] array, in the case of the tessellation control shader) is undefined after the vertex, tessellation control, and tessellation evaluation shading stages if the corresponding shader executable does not write to gl_PointSize. It is also undefined after the geometry processing stage if the geometry shader executable calls EmitVertex without having written gl_PointSize since the last call to EmitVertex (or hasn't written it at all).In the tessellation control, tessellation evaluation and geometry languages, the gl_PerVertex named block is used to construct an array, gl_in[] of per-vertex or per-control point inputs whose content represents the corresponding outputs written by the previous stage.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_PointSize.xhtml"}}},{"label":"gl_Position","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Variables":{"ty":"vec4","count":null}},"mode":{"Intrinsic":{"description":"In the vertex, tessellation evaluation and geometry languages, a single global instance of the gl_PerVertex named block is available and its gl_Position member is an output that receives the homogeneous vertex position. It may be written at any time during shader execution. The value written to gl_Position will be used by primitive assembly, clipping, culling and other fixed functionality operations, if present, that operate on primitives after vertex processing has occurred.In the tessellation control language, the gl_PerVertex named block is used to construct an array, gl_out[] , whose gl_Position members hold the homogeneous control point position, which become available as inputs to the subsequent tessellation evaluation shader.The value of gl_Position (or the gl_Position member of the gl_out[] array, in the case of the tessellation control shader) is undefined after the vertex, tessellation control, and tessellation evaluation shading stages if the corresponding shader executable does not write to gl_Position. It is also undefined after the geometry processing stage if the geometry shader executable calls EmitVertex without having written gl_Position since the last call to EmitVertex (or hasn't written it at all).In the tessellation control, tessellation evaluation and geometry languages, the gl_PerVertex named block is used to construct an array, gl_in[] of per-vertex or per-control point inputs whose content represents the corresponding outputs written by the previous stage.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_Position.xhtml"}}},{"label":"gl_PrimitiveIDIn","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_PrimitiveIDIn is a geometry language input variable that holds the number of primitives processed by the shader since the current set of rendering primitives was started. The first primitive processed by the drawing command is numbered zero and the primitive ID counter is incremented after every individual point, line or triangle primitive is processed. For triangles drawn in point or line mode, the primitive ID counter is incremented only once, even through multiple points or lines may actually be drawn. Restarting a primitive topology using the primitive restart index has no effect on the primitive ID counter.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_PrimitiveIDIn.xhtml"}}},{"label":"gl_SampleID","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_SampleID is a fragment language input variable that contains the index of the sample currently being processed. This variable is in the range 0 to gl_NumSamples - 1, where gl_NumSamples is the total number of samples in each fragment for the current framebuffer (and thus 1 if rendering to a non-multisample buffer). Any static use of this variable in a fragment shader causes the entire shader to be evaluated per-sample rather than per-fragment.When rendering to a non-multisample buffer, or if multisample rasterization is disabled, gl_SampleID will always be zero. gl_NumSamples is the sample count of the framebuffer regardless of whether multisample rasterization is enabled or not.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_SampleID.xhtml"}}},{"label":"gl_SampleMaskIn[]","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_SampleMaskIn is a fragment language that indicates the set of samples covered by the primitive generating the fragment during multisample rasterization. It has a sample bit set if and only if the sample is considered covered for this fragment shader invocation. Bit B of mask gl_SampleMask[M] corresponds to sample 32 * M + B . The array has ceil ( s / 32) elements where s is the maximum number of color samples supported by the implementation.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_SampleMaskIn.xhtml"}}},{"label":"gl_SamplePosition","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"vec2","count":null}},"mode":{"Intrinsic":{"description":"gl_SamplePosition is a fragment language input variable that contains the location within a fragment of the sample currently being processed. The x and y components of gl_SamplePosition contain the sub-pixel coordinate of the current sample and will have values in the range 0.0 to 1.0. The sub-pixel coordinates of the center of the pixel are always (0.5, 0.5). Any static use of gl_SamplePosition causes the entire fragment shader to be evaluated per-sample rather than per-fragment. When rendering to a non-multisample buffer, or if multisample rasterization is disabled, gl_SamplePosition will be (0.5, 0.5).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_SamplePosition.xhtml"}}},{"label":"gl_TessCoord","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"vec3","count":null}},"mode":{"Intrinsic":{"description":"Available only in the tessellation cevaluation language, gl_TessCoord specifies the three component (u, v, w) vector identifying the position of the vertex being processed by the shader relative to the primitive being tessellated.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_TessCoord.xhtml"}}},{"label":"gl_TessLevelInner[2]","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"float","count":null}},"mode":{"Intrinsic":{"description":"Available only in the tessellation control and evaluation languages, gl_TessLevelInner is used to assign values to the corresponding inner tesellation levels of the current patch. The values written into gl_TessLevelInner by the tessellation control shader are used by the tessellation primitive generator to control primitive tessellation and may be read by the subsequent tessellation evaluation shader.As inputs to the tessellation evaluation shader, gl_TessLevelInner contains the values written by the tessellation control shader, if present. If no tessellation control shader is present, it contains the default tessellation level.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_TessLevelInner.xhtml"}}},{"label":"gl_TessLevelOuter[4]","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"float","count":null}},"mode":{"Intrinsic":{"description":"Available only in the tessellation control and evaluation languages, gl_TessLevelOuter is used to assign values to the corresponding outer tesellation levels of the current patch. The values written into gl_TessLevelOuter by the tessellation control shader are used by the tessellation primitive generator to control primitive tessellation and may be read by the subsequent tessellation evaluation shader.As inputs to the tessellation evaluation shader, gl_TessLevelOuter contains the values written by the tessellation control shader, if present. If no tessellation control shader is present, it contains the default tessellation level.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_TessLevelOuter.xhtml"}}},{"label":"gl_VertexID","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_VertexID is a vertex language input variable that holds an integer index for the vertex. The index is implicitly generated by glDrawArrays and other commands that do not reference the content of the GL_ELEMENT_ARRAY_BUFFER , or explicitly generated from the content of the GL_ELEMENT_ARRAY_BUFFER by commands such as glDrawElements . For glDrawElements forms that take a basevertex , gl_VertexID will have this value added to the index from the buffer.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_VertexID.xhtml"}}},{"label":"gl_ViewportIndex","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"In the geometry language, gl_ViewportIndex is used to specify the index of the viewport to which the next primitive emitted from the shader should be drawn. Primitives generated by the geometry shader will undergo viewport transformation and scissor testing using the viewport transformation and scissor rectangle selected by the value of gl_ViewportIndex . The viewport index used will come from one of the vertices in the primitive being shaded. However, which vertex the viewport index comes from is implementation-defined, and so it is recommended to use the same viewport index for all vertices of a primitive. If a geometry shader does not assign a value to gl_ViewportIndex , viewport transform and scissor rectangle zero will be used. If a geometry shader statically assigns a value to gl_ViewportIndex and there is a path through the shader that does not assign a value to gl_ViewportIndex , the value of gl_ViewportIndex is undefined for executions of the shader that take that path.In the fragment language, gl_ViewportIndex will have the same value that was written to the output variable gl_ViewportIndex in the geometry stage. If the geometry stage does not dynamically assign to gl_ViewportIndex , the value of gl_ViewportIndex in the fragment shader will be undefined. If the geometry stage makes no static assignment to gl_ViewportIndex , the fragment stage will read zero. Otherwise, the fragment stage will read the same value written by the geometry stage, even if that value is out of range. If a fragment shader contains a static access to gl_ViewportIndex , it will count against the implementation defined limit for the maximum number of inputs to the fragment stage.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_ViewportIndex.xhtml"}}},{"label":"gl_WorkGroupID","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uvec3","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_WorkGroupID contains the 3-dimensional index of the global work group that the current compute shader invocation is executing within. The possible values range across the parameters passed into glDispatchCompute , i.e., from (0, 0, 0) to ( gl_NumWorkGroups.x - 1, gl_NumWorkGroups.y - 1, gl_NumWorkGroups.z - 1).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_WorkGroupID.xhtml"}}},{"label":"gl_WorkGroupSize","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Variables":{"ty":"uvec3","count":null}},"mode":{"Intrinsic":{"description":"In the compute language, gl_WorkGroupSize contains the size of a workgroup declared by a compute shader. The size of the work group in the X, Y, and Z dimensions is stored in the x, y, and z components of gl_WorkGroupSize . The values stored in gl_WorkGroupSize match those specified in the required local_size_x , local_size_y , and local_size_z layout qualifiers for the current shader. This value is constant so that it can be used to size arrays of memory that can be shared within the local work group.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_WorkGroupSize.xhtml"}}}],"variables":[{"label":"gl_FragDepth","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Variables":{"ty":"float","count":null}},"mode":{"Intrinsic":{"description":"Available only in the fragment language, gl_FragDepth is an output variable that is used to establish the depth value for the current fragment. If depth buffering is enabled and no shader writes to gl_FragDepth , then the fixed function value for depth will be used (this value is contained in the z component of gl_FragCoord ) otherwise, the value written to gl_FragDepth is used. If a shader statically assigns to gl_FragDepth , then the value of the fragment's depth may be undefined for executions of the shader that don't take that path. That is, if the set of linked fragment shaders statically contain a write to gl_FragDepth , then it is responsible for always writing it.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_FragDepth.xhtml"}}},{"label":"gl_PrimitiveID","requirement":null,"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_PrimitiveID is a tessellation control, tessellation evaluation and fragment language input variable. For the tessellation control and tessellation evaluation languages, it holds the number of primitives processed by the shader since the current set of rendering primitives was started. The first primitive processed by the drawing command is numbered zero and the primitive ID counter is incremented after every individual point, line or triangle primitive is processed. For triangles drawn in point or line mode, the primitive ID counter is incremented only once, even through multiple points or lines may actually be drawn. Restarting a primitive topology using the primitive restart index has no effect on the primitive ID counter.In the geometry language, gl_PrimitiveID is an output variable that is passed to the corresponding gl_PrimitiveID input variable in the fragment shader. If no geomery shader is present then gl_PrimitiveID in the fragment language behaves identically as it would in the tessellation control and evaluation languages. If a geometry shader is present but does not write to gl_PrimitiveID , the value of gl_PrimitiveID in the fragment shader is undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_PrimitiveID.xhtml"}}},{"label":"gl_SampleMask[]","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Variables":{"ty":"int","count":null}},"mode":{"Intrinsic":{"description":"gl_SampleMask is a fragment language output array that may be used to set the sample mask for the fragment being processed. Coverage for the current fragment will become the logical AND of the coverage mask and the output gl_SampleMask . That is, setting a bit in gl_SampleMask to zero will cause the corresponding sample to be considered uncovered for the purposes of multisample fragment operations. However, setting sample mask bits back to one will never enable samples not covered by the original primitive. Bit B of mask gl_SampleMask[M] corresponds to sample 32 * M + B . This array must be sized in the fragment shader either implicitly or explicitly to be the same size as the implementation-dependent maximum sample-mask (as an array of 32-bit elements), determined by the maximum number of samples. If the fragment shader statically assigns a value to gl_SampleMask , the sample mask will be undefined for any array elements of any fragment shader invocation that fails to assign a value. If a shader does not statically assign a value to gl_SampleMask , the sample mask has no effect on the processing of a fragment. If the fragment shader is being evaluated at any frequency other than per-fragment, bits within the sample mask not corresponding to the current fragment shader invocation are ignored.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/gl_SampleMask.xhtml"}}},{"label":"EmitMeshTasksEXT","requirement":{"Glsl":{"stages":64,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"Emit the given number of mesh task for next stage on each axis.","parameters":[{"ty":"uint","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""},{"ty":"uint","label":"z","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"SetMeshOutputsEXT","requirement":{"Glsl":{"stages":32,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"Set the output values for current thread.","parameters":[{"ty":"uint","label":"vertexCount","count":null,"description":"Number of vertex to output for current thread."},{"ty":"uint","label":"primitiveCount","count":null,"description":"Number of primitive to output for current thread."}]}]}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_MeshVerticesEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Variables":{"ty":"gl_MeshPerVertexEXT","count":"Unsized"}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_MeshPrimitivesEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Variables":{"ty":"gl_MeshPerPrimitiveEXT","count":"Unsized"}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_MeshVerticesEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Variables":{"ty":"gl_PrimitivePointIndicesEXT","count":"Unsized"}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_PrimitiveLineIndicesEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Variables":{"ty":"uvec2","count":"Unsized"}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}},{"label":"gl_PrimitiveTriangleIndicesEXT","requirement":{"Glsl":{"stages":96,"min_version":null,"extension":"GLSL_EXT_mesh_shader"}},"data":{"Variables":{"ty":"uvec3","count":"Unsized"}},"mode":{"Intrinsic":{"description":"","link":"https://github.com/KhronosGroup/GLSL/blob/main/extensions/ext/GLSL_EXT_mesh_shader.txt"}}}],"functions":[{"label":"abs","requirement":{"Glsl":{"stages":null,"min_version":410,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"abs returns the absolute value of x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/abs.xhtml"}}},{"label":"acos","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"acos returns the angle whose trigonometric cosine is $x$. The range of values returned by acos is $[0,\\pi]$. The result is undefined if $\\left| x \\right| > 1$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/acos.xhtml"}}},{"label":"acosh","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"acosh returns the arc hyperbolic cosine of $x$; the non-negative inverse of cosh . The result is undefined if $x < 1$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/acosh.xhtml"}}},{"label":"all","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bool","description":"","parameters":[{"ty":"bvec","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"all returns true if all elements of x are true and false otherwise. It is functionally equivalent to:    bool all(bvec x)       // bvec can be bvec2, bvec3 or bvec4\n    {\n        bool result = true;\n        int i;\n        for (i = 0; i < x.length(); ++i)\n        {\n            result &= x[i];\n        }\n        return result;\n    }","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/all.xhtml"}}},{"label":"any","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bool","description":"","parameters":[{"ty":"bvec","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"any returns true if any element of x is true and false otherwise. It is functionally equivalent to:    bool any(bvec x) {     // bvec can be bvec2, bvec3 or bvec4\n        bool result = false;\n        int i;\n        for (i = 0; i < x.length(); ++i) {\n            result |= x[i];\n        }\n        return result;\n    }","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/any.xhtml"}}},{"label":"asin","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"asin returns the angle whose trigonometric sine is $x$. The range of values returned by asin is $[-{\\pi \\over 2}, {\\pi \\over 2}]$. The result is undefined if $\\left| x \\right| > 1$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/asin.xhtml"}}},{"label":"asinh","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"asinh returns the arc hyperbolic sine of x ; the inverse of sinh .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/asinh.xhtml"}}},{"label":"atan","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"y","count":null,"description":""},{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"y_over_x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atan returns either the angle whose trigonometric arctangent is $y \\over x$ or y_over_x , depending on which overload is invoked. In the first overload, the signs of $y$ and $x$ are used to determine the quadrant that the angle lies in. The value returned by atan in this case is in the range $[-\\pi,\\pi]$. The result is undefined if $x = 0$.For the second overload, atan returns the angle whose tangent is y_over_x . The value returned in this case is in the range $[-{\\pi \\over 2 },{\\pi \\over 2}]$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atan.xhtml"}}},{"label":"atanh","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atanh returns the arc hyperbolic tangent of $x$; the inverse of tanh . The result is undefined if $\\left| x \\right| > 1$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atanh.xhtml"}}},{"label":"atomicAdd","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicAdd performs an atomic addition of data to the contents of mem and returns the original contents of mem from before the addition occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicAdd.xhtml"}}},{"label":"atomicAnd","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicAnd performs an atomic logical AND with data to the contents of mem and returns the original contents of mem from before the logical operation occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicAnd.xhtml"}}},{"label":"atomicCompSwap","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicCompSwap performs an atomic comparison of compare with the contents of mem . If the content of mem is equal to compare , then the content of data is written into mem , otherwise the content of mem is unmodifed. The function returns the original content of mem regardless of the outcome of the comparison. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of an atomic memory function does not correspond to a buffer or\n            shared variable. It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicCompSwap.xhtml"}}},{"label":"atomicCounter","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"atomic_uint","label":"c","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicCounter returns the current value of the atomic counter c .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicCounter.xhtml"}}},{"label":"atomicCounterDecrement","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"atomic_uint","label":"c","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicCounterDecrement atomically decrements the value of the atomic counter c and returns its new value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicCounterDecrement.xhtml"}}},{"label":"atomicCounterIncrement","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"atomic_uint","label":"c","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicCounterIncrement atomically increments the value of the atomic counter c and returns its prior value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicCounterIncrement.xhtml"}}},{"label":"atomicExchange","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicExchange performs an atomic exhange of data with the contents of mem . The content of data is written into mem and the original contents of mem are returned. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicExchange.xhtml"}}},{"label":"atomicMax","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicMax performs an atomic comparison of data to the contents of mem , writes the maximum value into mem and returns the original contents of mem from before the comparison occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicMax.xhtml"}}},{"label":"atomicMin","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicMin performs an atomic comparison of data to the contents of mem , writes the minimum value into mem and returns the original contents of mem from before the comparison occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicMin.xhtml"}}},{"label":"atomicOr","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicOr performs an atomic logical OR with data to the contents of mem and returns the original contents of mem from before the logical operation occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicOr.xhtml"}}},{"label":"atomicXor","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"inout int","label":"mem","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"inout uint","label":"mem","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"atomicXor performs an atomic logical exclusive OR with data to the contents of mem and returns the original contents of mem from before the logical operation occurred. The contents of the memory being updated by the atomic operation are guaranteed not to be modified by any other assignment or atomic memory function in any shader invocation between the time the original value is read and the time the new value is written.\n            Atomic memory functions are supported only for a limited set of variables.  A shader will fail to compile\n            if the value passed to the mem argument of  an atomic memory function does not correspond to a buffer or\n            shared variable.  It is acceptable to pass an element of an array or a single component of a vector to the\n            mem argument of an atomic memory function, as long as the underlying array or vector is a buffer or\n            shared variable.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/atomicXor.xhtml"}}},{"label":"barrier","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"Available only in the Tessellation Control and Compute Shaders , barrier provides a partially defined order of execution between shader invocations. For any given static instance of barrier , in a tessellation control shader, all invocations for a single input patch must enter it before any will be allowed to continue beyond it. For any given static instance of barrier in a compute shader, all invocations within a single work group must enter it before any are allowed to continue beyond it. This ensures that values written by one invocation prior to a given static instance of barrier can be safely read by other invocations after their call to the same static instance of barrier . Because invocations may execute in undefined order between these barrier calls, the values of a per-vertex or per-patch output variable, or any shared variable will be undefined in a number of cases.barrier may only be placed inside the function main() of the tessellation control shader, but may be placed anywhere in a compute shader. Calls to barrier may not be placed within any control flow. Barriers are also disallowed after a return statement in the function main() .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/barrier.xhtml"}}},{"label":"bitCount","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"value","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genUType","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"bitCount returns the number of bits that are set to 1 in the binary representation of value .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/bitCount.xhtml"}}},{"label":"bitfieldExtract","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"value","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"int","label":"bits","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"value","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"int","label":"bits","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"bitfieldExtract extracts a subset of the bits of value and returns it in the least significant bits of the result. The range of bits extracted is [ offset , offset + bits - 1].For unsigned data types, the most significant bits of the result will be set to zero. For signed data types, the most significant bits will be set to the value of bit offset + base - 1 (i.e., it is sign extended to the width of the return type).If bits is zero, the result will be zero. The result will be undefined if offset or bits is negative, or if the sum of offset and bits is greater than the number of bits used to store the operand.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/bitfieldExtract.xhtml"}}},{"label":"bitfieldInsert","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"base","count":null,"description":""},{"ty":"genIType","label":"insert","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"int","label":"bits","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"base","count":null,"description":""},{"ty":"genUType","label":"insert","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"int","label":"bits","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"bitfieldInsert inserts the bits least significant bits of insert into base at offset offset . The returned value will have bits [ offset , offset + bits + 1] taken from [0, bits - 1] of insert and all other bits taken directly from the corresponding bits of base . If bits is zero, the result will simply be the original value of base . The result will be undefined if offset or bits is negative, or if the sum of offset and bits is greater than the number of bits used to store the operand.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/bitfieldInsert.xhtml"}}},{"label":"bitfieldReverse","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"value","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"bitfieldReverse returns the reversal of the bits of value. The bit numbered n will be taken from bit ( bits - 1) - n of value , where bits is the total number of bits used to represent value .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/bitfieldReverse.xhtml"}}},{"label":"ceil","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"ceil returns a value equal to the nearest integer that is greater than or equal to x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/ceil.xhtml"}}},{"label":"clamp","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"minVal","count":null,"description":""},{"ty":"genType","label":"maxVal","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"float","label":"minVal","count":null,"description":""},{"ty":"float","label":"maxVal","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"minVal","count":null,"description":""},{"ty":"genDType","label":"maxVal","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"double","label":"minVal","count":null,"description":""},{"ty":"double","label":"maxVal","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"genIType","label":"minVal","count":null,"description":""},{"ty":"genIType","label":"maxVal","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"int","label":"minVal","count":null,"description":""},{"ty":"int","label":"maxVal","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"minVal","count":null,"description":""},{"ty":"genUType","label":"maxVal","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"uint","label":"minVal","count":null,"description":""},{"ty":"uint","label":"maxVal","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"clamp returns the value of x constrained to the range minVal to maxVal . The returned value is computed as min ( max ( x , minVal ), maxVal ).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/clamp.xhtml"}}},{"label":"cos","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"angle","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"cos returns the trigonometric cosine of angle .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/cos.xhtml"}}},{"label":"cosh","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"cosh returns the hyperbolic cosine of x . The hyperbolic cosine of x is computed as e x + e - x 2 .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/cosh.xhtml"}}},{"label":"cross","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec3","description":"","parameters":[{"ty":"vec3","label":"x","count":null,"description":""},{"ty":"vec3","label":"y","count":null,"description":""}]},{"returnType":"dvec3","description":"","parameters":[{"ty":"dvec3","label":"x","count":null,"description":""},{"ty":"dvec3","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"cross returns the cross product of two vectors, x and y , i.e. $\\begin{pmatrix} { x[1] \\times y[2] - y[1] \\times x[2] } \\\\ { x[2] \\times y[0] - y[2] \\times x[0] } \\\\ { x[0] \\times y[1] - y[0] \\times x[1] } \\end{pmatrix}$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/cross.xhtml"}}},{"label":"degrees","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"radians","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"degrees converts a quantity specified in radians into degrees. The return value is ${ 180 \\times radians } \\over \\pi$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/degrees.xhtml"}}},{"label":"determinant","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"mat2","label":"m","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"mat3","label":"m","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"mat4","label":"m","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"dmat2","label":"m","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"dmat3","label":"m","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"dmat4","label":"m","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"determinant returns the determinant of the matrix m .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/determinant.xhtml"}}},{"label":"dFdxFine","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"dFdx","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"dFdyFine","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"dFdy","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"dFdxCoarse","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"dFdyCoarse","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the partial derivative of expression p with respect to the window $x$ coordinate (for dFdx* ) and $y$ coordinate (for dFdy* ).dFdxFine and dFdyFine calculate derivatives using local differencing based on the value of p for the current fragment and its immediate neighbor(s).dFdxCoarse and dFdyCoarse calculate derivatives using local differencing based on the value of p for the current fragment's neighbors, and will possibly, but not necessarily, include the value for the current fragment. That is, over a given area, the implementation can compute derivatives in fewer unique locations than would be allowed for the corresponding dFdxFine and dFdyFine functions.dFdx returns either dFdxCoarse or dFdxFine . dFdy returns either dFdyCoarse or dFdyFine . The implementation may choose which calculation to perform based upon factors such as performance or the value of the API GL_FRAGMENT_SHADER_DERIVATIVE_HINT hint.Expressions that imply higher order derivatives such as dFdx(dFdx(n)) have undefined results, as do mixed-order derivatives such as dFdx(dFdy(n)) . It is assumed that the expression p is continuous and therefore, expressions evaluated via non-uniform control flow may be undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dFdx.xhtml"}}},{"label":"distance","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"genType","label":"p0","count":null,"description":""},{"ty":"genType","label":"p1","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"genDType","label":"p0","count":null,"description":""},{"ty":"genDType","label":"p1","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"distance returns the distance between the two points p0 and p1 . i.e., length ( p0 - p1 );","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/distance.xhtml"}}},{"label":"dot","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"dot returns the dot product of two vectors, x and y . i.e., x [ 0 ] • y [ 0 ] + x [ 1 ] • y [ 1 ] + ...","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/dot.xhtml"}}},{"label":"EmitStreamVertex","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[{"ty":"int","label":"stream","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the Geometry Shader , EmitStreamVertex emits the current values of output variables to the current output primitive on stream stream . The argument stream must be a constant integral expression. On return from this call, the value of all output variables for all streams are undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/EmitStreamVertex.xhtml"}}},{"label":"EmitVertex","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"Available only in the Geometry Shader , EmitVertex emits the current values of output variables to the current output primitive on the first (and possibly only) primitive stream. It is equivalent to calling EmitStreamVertex with stream set to 0.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/EmitVertex.xhtml"}}},{"label":"EndPrimitive","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"Available only in the Geometry Shader , EndPrimitive completes the current output primitive on the first (and possibly only) vertex stream and starts a new one.No vertex is emitted. Calling EndPrimitive is equivalent to calling EmitStreamVertex with stream set to 0.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/EndPrimitive.xhtml"}}},{"label":"EndStreamPrimitive","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[{"ty":"int","label":"stream","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the Geometry Shader , EndStreamPrimitive completes the current output primitive on stream stream and starts a new one. The argument to stream must be a constant integral expression. No vertex is emitted.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/EndStreamPrimitive.xhtml"}}},{"label":"equal","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"equal returns a boolean vector in which each element i is computed as x [ i ] == y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/equal.xhtml"}}},{"label":"exp","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"exp returns the natural exponentiation of x . i.e., e x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/exp.xhtml"}}},{"label":"exp2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"exp2 returns 2 raised to the power of x . i.e., 2 x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/exp2.xhtml"}}},{"label":"faceforward","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"N","count":null,"description":""},{"ty":"genType","label":"I","count":null,"description":""},{"ty":"genType","label":"Nref","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"N","count":null,"description":""},{"ty":"genDType","label":"I","count":null,"description":""},{"ty":"genDType","label":"Nref","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"faceforward orients a vector to point away from a surface as defined by its normal. If dot ( Nref , I ) < 0 faceforward returns N , otherwise it returns - N .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/faceforward.xhtml"}}},{"label":"findLSB","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"value","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genUType","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"findLSB returns the bit number of the least significant bit that is set to 1 in the binary representation of value . If value is zero, -1 will be returned.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/findLSB.xhtml"}}},{"label":"findMSB","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"value","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genUType","label":"value","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"findMSB returns the bit number of the most significant bit that is set to 1 in the binary representation of value . For positive integers, the result will be the bit number of the most significant bit that is set to 1. For negative integers, the result will be the bit number of the most significant bit set to 0. For a value of zero or negative 1, -1 will be returned.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/findMSB.xhtml"}}},{"label":"floatBitsToUint","requirement":{"Glsl":{"stages":null,"min_version":330,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genUType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"floatBitsToInt and floatBitsToUint return the encoding of their floating-point parameters as int or uint , respectively. The floating-point bit-level representation is preserved.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/floatBitsToInt.xhtml"}}},{"label":"floatBitsToInt","requirement":{"Glsl":{"stages":null,"min_version":330,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genIType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"floatBitsToInt and floatBitsToUint return the encoding of their floating-point parameters as int or uint , respectively. The floating-point bit-level representation is preserved.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/floatBitsToInt.xhtml"}}},{"label":"floor","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"floor returns a value equal to the nearest integer that is less than or equal to x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/floor.xhtml"}}},{"label":"fma","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"a","count":null,"description":""},{"ty":"genType","label":"b","count":null,"description":""},{"ty":"genType","label":"c","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"a","count":null,"description":""},{"ty":"genDType","label":"b","count":null,"description":""},{"ty":"genDType","label":"c","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"fma performs, where possible, a fused multiply-add operation, returning a * b + c . In use cases where the return value is eventually consumed by a variable declared as precise : fma () is considered a single operation, whereas the expression a * b + c consumed by a variable declared as precise is considered two operations. The precision of fma () can differ from the precision of the expression a * b + c . fma () will be computed with the same precision as any other fma () consumed by a precise variable, giving invariant results for the same input values of a , b and c . Otherwise, in the absence of precise consumption, there are no special constraints on the number of operations or difference in precision between fma () and the expression a * b + c .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/fma.xhtml"}}},{"label":"fract","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"fract returns the fractional part of x . This is calculated as x - floor ( x ).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/fract.xhtml"}}},{"label":"frexp","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"out genIType","label":"exp","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"out genIType","label":"exp","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"frexp extracts x into a floating-point significand in the range [0.5, 1.0) and in integral exponent of two, such that:x = significand • 2 exponentThe significand is returned by the function and the exponent is returned in the output parameter exp . For a floating-point value of zero, the significand and exponent are both zero. For a floating-point value that is an infinity or a floating-point NaN, the results are undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/frexp.xhtml"}}},{"label":"fwidthCoarse","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the sum of the absolute derivatives in $x$ and $y$ using local differencing for the input argument p . fwidth is equivalent to abs ( dFdx (p)) + abs ( dFdy (p)) . fwidthCoarse is equivalent to abs ( dFdxCoarse (p)) + abs ( dFdyCoarse (p)) . fwidthFine is equivalent to abs ( dFdxFine (p)) + abs ( dFdyFine (p)) .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/fwidth.xhtml"}}},{"label":"fwidth","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the sum of the absolute derivatives in $x$ and $y$ using local differencing for the input argument p . fwidth is equivalent to abs ( dFdx (p)) + abs ( dFdy (p)) . fwidthCoarse is equivalent to abs ( dFdxCoarse (p)) + abs ( dFdyCoarse (p)) . fwidthFine is equivalent to abs ( dFdxFine (p)) + abs ( dFdyFine (p)) .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/fwidth.xhtml"}}},{"label":"fwidthFine","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , these functions return the sum of the absolute derivatives in $x$ and $y$ using local differencing for the input argument p . fwidth is equivalent to abs ( dFdx (p)) + abs ( dFdy (p)) . fwidthCoarse is equivalent to abs ( dFdxCoarse (p)) + abs ( dFdyCoarse (p)) . fwidthFine is equivalent to abs ( dFdxFine (p)) + abs ( dFdyFine (p)) .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/fwidth.xhtml"}}},{"label":"greaterThan","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"greaterThan returns a boolean vector in which each element i is computed as x [ i ] > y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/greaterThan.xhtml"}}},{"label":"greaterThanEqual","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"greaterThanEqual returns a boolean vector in which each element i is computed as x [ i ] >= y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/greaterThanEqual.xhtml"}}},{"label":"groupMemoryBarrier","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"groupMemoryBarrier waits on the completion of all memory accesses performed by an invocation of a compute shader relative to the same access performed by other invocations in the same work group and then returns with no other effect.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/groupMemoryBarrier.xhtml"}}},{"label":"imageAtomicAdd","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicAdd atomically computes a new value by adding the value of data to the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicAdd.xhtml"}}},{"label":"imageAtomicAnd","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicAnd atomically computes a new value by logically ANDing the value of data to the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicAnd.xhtml"}}},{"label":"imageAtomicCompSwap","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"compare","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"compare","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicCompSwap atomically compares the value of compare with that of the texel at coordinate P and sample (for multisampled forms) in the image bound to uint image . If the values are equal, data is stored into the texel, otherwise it is discarded. It returns the original value of the texel regardless of the result of the comparison operation.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicCompSwap.xhtml"}}},{"label":"imageAtomicExchange","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"float","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicExchange atomically stores the value of data into the texel at coordinate P and sample in the image bound to unit image , and returns the original value of the texel.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicExchange.xhtml"}}},{"label":"imageAtomicMax","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicMax atomically computes a new value by finding the maximum of the value of data and the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicMax.xhtml"}}},{"label":"imageAtomicMin","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicMin atomically computes a new value by finding the minimum of the value of data and the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicMin.xhtml"}}},{"label":"imageAtomicOr","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicOr atomically computes a new value by logically ORing the value of data to the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicOr.xhtml"}}},{"label":"imageAtomicXor","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"uint","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"uint","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"int","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageAtomicXor atomically computes a new value by logically XORing the value of data to the contents of the texel at coordinate P and sample in the image bound to uint image , stores that value into the image and returns the original value.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageAtomicXor.xhtml"}}},{"label":"imageLoad","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimageBuffer","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageLoad loads the texel at the coordinate P from the image unit image . For multi-sample loads, the sample number is given by sample . When image , P , sample identify a valid texel, the bits used to represent the selected texel in memory are converted to a vec4, ivec4, or uvec4 in the manner described in the OpenGL Specification and returned.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageLoad.xhtml"}}},{"label":"imageSamples","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageSamples returns the number of samples per texel of the image bound to image .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageSamples.xhtml"}}},{"label":"imageSize","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gimageRect","label":"image","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gimageBuffer","label":"image","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageSize returns the dimensions of the image bound to image . The components in the return value are filled in, in order, with the width, height and depth of the image. For the array forms, the last component of the return value is the number of layers in the texture array.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageSize.xhtml"}}},{"label":"imageStore","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[{"ty":"gimage1D","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage2D","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage3D","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage2DRect","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimageCube","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gbufferImage","label":"image","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage1DArray","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage2DArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimageCubeArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage2DMS","label":"image","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]},{"returnType":"void","description":"","parameters":[{"ty":"gimage2DMSArray","label":"image","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""},{"ty":"gvec4","label":"data","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"imageStore stores data into the texel at the coordinate P from the image specified by image . For multi-sample stores, the sample number is given by sample . When image , P , and sample identify a valid texel, the bits used to represent data are converted to the format of the image unit in the manner described in of the OpenGL Specification and stored to the specified texel.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/imageStore.xhtml"}}},{"label":"intBitsToFloat","requirement":{"Glsl":{"stages":null,"min_version":330,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"intBitsToFloat and uintBitsToFloat return the encoding passed in parameter x as a floating-point value. If the encoding of a NaN is passed in x , it will not signal and the resulting value will be undefined. If the encoding of a floating point infinity is passed in parameter x , the resulting floating-point value is the corresponding (positive or negative) floating point infinity.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/intBitsToFloat.xhtml"}}},{"label":"uintBitsToFloat","requirement":null,"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"intBitsToFloat and uintBitsToFloat return the encoding passed in parameter x as a floating-point value. If the encoding of a NaN is passed in x , it will not signal and the resulting value will be undefined. If the encoding of a floating point infinity is passed in parameter x , the resulting floating-point value is the corresponding (positive or negative) floating point infinity.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/intBitsToFloat.xhtml"}}},{"label":"interpolateAtCentroid","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"float","label":"interpolant","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"vec2","label":"interpolant","count":null,"description":""}]},{"returnType":"vec3","description":"","parameters":[{"ty":"vec3","label":"interpolant","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"vec4","label":"interpolant","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"interpolateAtCentroid returns the value of the input varying interpolant sampled at a location inside both the pixel and the primitive being processed. The value obtained would be the value assigned to the input variable if declared with the centroid qualifier.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/interpolateAtCentroid.xhtml"}}},{"label":"interpolateAtOffset","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"float","label":"interpolant","count":null,"description":""},{"ty":"vec2","label":"offset","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"vec2","label":"interpolant","count":null,"description":""},{"ty":"vec2","label":"offset","count":null,"description":""}]},{"returnType":"vec3","description":"","parameters":[{"ty":"vec3","label":"interpolant","count":null,"description":""},{"ty":"vec2","label":"offset","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"vec4","label":"interpolant","count":null,"description":""},{"ty":"vec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"interpolateAtOffset returns the value of the input varying interpolant sampled at an offset from the center of the pixel specified by offset . The two floating-point components of offset give the offset in pixels in the x and y directions from the center of the pixel, respectively. An offset of (0, 0) identifies the center of the pixel. The range and granularity of offsets supported by this function is implementation-dependent.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/interpolateAtOffset.xhtml"}}},{"label":"interpolateAtSample","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"float","label":"interpolant","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"vec2","label":"interpolant","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]},{"returnType":"vec3","description":"","parameters":[{"ty":"vec3","label":"interpolant","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"vec4","label":"interpolant","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"interpolateAtSample returns the value of the input varying interpolant sampled at the location of sample number sample . If multisample buffers are not available, the input varying will be evaluated at the center of the pixel. If sample sample does not exist, the position used to interpolate the input varying is undefined.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/interpolateAtSample.xhtml"}}},{"label":"inverse","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"mat2","description":"","parameters":[{"ty":"mat2","label":"m","count":null,"description":""}]},{"returnType":"mat3","description":"","parameters":[{"ty":"mat3","label":"m","count":null,"description":""}]},{"returnType":"mat4","description":"","parameters":[{"ty":"mat4","label":"m","count":null,"description":""}]},{"returnType":"dmat2","description":"","parameters":[{"ty":"dmat2","label":"m","count":null,"description":""}]},{"returnType":"dmat3","description":"","parameters":[{"ty":"dmat3","label":"m","count":null,"description":""}]},{"returnType":"dmat4","description":"","parameters":[{"ty":"dmat4","label":"m","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"inverse returns the inverse of the matrix m . The values in the returned matrix are undefined if m is singular or poorly-conditioned (nearly singular).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/inverse.xhtml"}}},{"label":"inversesqrt","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"inversesqrt returns the inverse of the square root of $x$; i.e. the value $1 \\over { \\sqrt x }$. The result is undefined if $x \\leq 0$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/inversesqrt.xhtml"}}},{"label":"isinf","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genBType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genBType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"For each element i of the result, isinf returns true if x [ i ] is positive or negative floating point infinity and false otherwise.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/isinf.xhtml"}}},{"label":"isnan","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genBType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genBType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"For each element i of the result, isnan returns true if x [ i ] is positive or negative floating point NaN (Not a Number) and false otherwise.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/isnan.xhtml"}}},{"label":"ldexp","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genIType","label":"exp","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genIType","label":"exp","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"ldexp builds a floating point number from x and the corresponding integral exponent of two in exp , returning:significand • 2 exponent\n            If this product is too large to be represented in the floating point type, the result\n            is undefined.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/ldexp.xhtml"}}},{"label":"length","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"double","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"length returns the length of the vector, i.e. $\\sqrt { { x[0] }^2 + { x[1] }^2 + \\dots }$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/length.xhtml"}}},{"label":"lessThan","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"lessThan returns a boolean vector in which each element i is computed as x [ i ] < y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/lessThan.xhtml"}}},{"label":"lessThanEqual","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"lessThanEqual returns a boolean vector in which each element i is computed as x [ i ] <= y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/lessThanEqual.xhtml"}}},{"label":"log","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"log returns the natural logarithm of $x$, i.e. the value $y$ which satisfies $x = e^y$. The result is undefined if $x \\leq 0$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/log.xhtml"}}},{"label":"log2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"log2 returns the base 2 logarithm of $x$, i.e. the value $y$ which satisfies $x = 2^y$. The result is undefined if $x \\leq 0$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/log2.xhtml"}}},{"label":"matrixCompMult","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"mat","description":"","parameters":[{"ty":"mat","label":"x","count":null,"description":""},{"ty":"mat","label":"y","count":null,"description":""}]},{"returnType":"dmat","description":"","parameters":[{"ty":"dmat","label":"x","count":null,"description":""},{"ty":"dmat","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"matrixCompMult performs a component-wise multiplication of two matrices, yielding a result matrix where each component, result[i][j] is computed as the scalar product of x [i][j] and y [i][j] .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/matrixCompMult.xhtml"}}},{"label":"max","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"genIType","label":"y","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"int","label":"y","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"max returns the maximum of the two parameters. It returns y if y is greater than x , otherwise it returns x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/max.xhtml"}}},{"label":"memoryBarrier","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"memoryBarrier waits on the completion of all memory accesses resulting from the use of image variables or atomic counters and then returns with no other effect. When this function returns, the results of any memory stores performed using coherent variables performed prior to the call will be visible to any future coherent memory access to the same addresses from other shader invocations. In particular, the values written this way in one shader stage are guaranteed to be visible to coherent memory accesses performed by shader invocations in subsequent stages when those invocations were triggered by the execution of the original shader invocation (e.g., fragment shader invocations for a primitive resulting from a particular geometry shader invocation).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/memoryBarrier.xhtml"}}},{"label":"memoryBarrierAtomicCounter","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"memoryBarrierAtomicCounter waits on the completion of all accesses resulting from the use of atomic counters and then returns with no other effect. When this function returns, the results of any modifications to the value of atomic counters will be visible to any access to the same counter from other shader invocations. In particular, any modifications made in one shader stage are guaranteed to be visible to accesses performed by shader invocations in subsequent stages when those invocations were triggered by the execution of the original shader invocation (e.g., fragment shader invocations for a primitive resulting from a particular geometry shader invocation).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/memoryBarrierAtomicCounter.xhtml"}}},{"label":"memoryBarrierBuffer","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"memoryBarrierBuffer waits on the completion of all memory accesses resulting from the use of buffer variables and then returns with no other effect. When this function returns, the results of any modifications to the content of buffer variables will be visible to any access to the same buffer from other shader invocations. In particular, any modifications made in one shader stage are guaranteed to be visible to accesses performed by shader invocations in subsequent stages when those invocations were triggered by the execution of the original shader invocation (e.g., fragment shader invocations for a primitive resulting from a particular geometry shader invocation).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/memoryBarrierBuffer.xhtml"}}},{"label":"memoryBarrierImage","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"memoryBarrierImage waits on the completion of all memory accesses resulting from the use of image variables and then returns with no other effect. When this function returns, the results of any modifications to the content of image variables will be visible to any access to the same buffer from other shader invocations. In particular, any modifications made in one shader stage are guaranteed to be visible to accesses performed by shader invocations in subsequent stages when those invocations were triggered by the execution of the original shader invocation (e.g., fragment shader invocations for a primitive resulting from a particular geometry shader invocation).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/memoryBarrierImage.xhtml"}}},{"label":"memoryBarrierShared","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[]}]}},"mode":{"Intrinsic":{"description":"memoryBarrierShared waits on the completion of all memory accesses resulting from the use of shared variables and then returns with no other effect. When this function returns, the results of any modifications to the content of shared variables will be visible to any access to the same buffer from other shader invocations. In particular, any modifications made in one shader stage are guaranteed to be visible to accesses performed by shader invocations in subsequent stages when those invocations were triggered by the execution of the original shader invocation (e.g., fragment shader invocations for a primitive resulting from a particular geometry shader invocation).memoryBarrierShared is available only in the compute language.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/memoryBarrierShared.xhtml"}}},{"label":"min","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"genIType","label":"y","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"int","label":"y","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"uint","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"min returns the minimum of the two parameters. It returns y if y is less than x , otherwise it returns x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/min.xhtml"}}},{"label":"mix","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""},{"ty":"genType","label":"a","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""},{"ty":"float","label":"a","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""},{"ty":"genDType","label":"a","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""},{"ty":"double","label":"a","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""},{"ty":"genBType","label":"a","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""},{"ty":"genBType","label":"a","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"genIType","label":"y","count":null,"description":""},{"ty":"genBType","label":"a","count":null,"description":""}]},{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""},{"ty":"genBType","label":"a","count":null,"description":""}]},{"returnType":"genBType","description":"","parameters":[{"ty":"genBType","label":"x","count":null,"description":""},{"ty":"genBType","label":"y","count":null,"description":""},{"ty":"genBType","label":"a","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"mix performs a linear interpolation between x and y using a to weight between them. The return value is computed as $x \\times (1 - a) + y \\times a$.The variants of mix where a is genBType select which vector each returned component comes from. For a component of a that is false, the corresponding component of x is returned. For a component of a that is true, the corresponding component of y is returned. Components of x and y that are not selected are allowed to be invalid floating-point values and will have no effect on the results.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/mix.xhtml"}}},{"label":"mod","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"float","label":"y","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"double","label":"y","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"genDType","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"mod returns the value of x modulo y . This is computed as x - y * floor ( x / y ).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/mod.xhtml"}}},{"label":"modf","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"out genType","label":"i","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""},{"ty":"out genDType","label":"i","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"modf separates a floating point value x into its integer and fractional parts. The fractional part of the number is returned from the function and the integer part (as a floating point quantity) is returned in the output parameter i .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/modf.xhtml"}}},{"label":"noise3","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec3","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"noise1 , noise2 , noise3 and noise4 return noise values (vector or scalar) based on the input value x . The noise function is a stochastic function that can be used to increase visual complexity. Values returned by the noise functions give the appearance of randomness, but are not truly random. They are defined to have the following characteristics:The return value(s) are always in the range [-1.0,1.0], and cover at least the range [-0.6, 0.6], with a Gaussian-like distribution. The return value(s) have an overall average of 0.0. They are repeatable, in that a particular input value will always produce the same return value. They are statistically invariant under rotation (i.e., no matter how the domain is rotated, it has the same statistical character). They have a statistical invariance under translation (i.e., no matter how the domain is translated, it has the same statistical character). They typically give different results under translation. The spatial frequency is narrowly concentrated, centered somewhere between 0.5 to 1.0. They are C1 continuous everywhere (i.e., the first derivative is continuous).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/noise.xhtml"}}},{"label":"noise1","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"float","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"noise1 , noise2 , noise3 and noise4 return noise values (vector or scalar) based on the input value x . The noise function is a stochastic function that can be used to increase visual complexity. Values returned by the noise functions give the appearance of randomness, but are not truly random. They are defined to have the following characteristics:The return value(s) are always in the range [-1.0,1.0], and cover at least the range [-0.6, 0.6], with a Gaussian-like distribution. The return value(s) have an overall average of 0.0. They are repeatable, in that a particular input value will always produce the same return value. They are statistically invariant under rotation (i.e., no matter how the domain is rotated, it has the same statistical character). They have a statistical invariance under translation (i.e., no matter how the domain is translated, it has the same statistical character). They typically give different results under translation. The spatial frequency is narrowly concentrated, centered somewhere between 0.5 to 1.0. They are C1 continuous everywhere (i.e., the first derivative is continuous).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/noise.xhtml"}}},{"label":"noise4","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec4","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"noise1 , noise2 , noise3 and noise4 return noise values (vector or scalar) based on the input value x . The noise function is a stochastic function that can be used to increase visual complexity. Values returned by the noise functions give the appearance of randomness, but are not truly random. They are defined to have the following characteristics:The return value(s) are always in the range [-1.0,1.0], and cover at least the range [-0.6, 0.6], with a Gaussian-like distribution. The return value(s) have an overall average of 0.0. They are repeatable, in that a particular input value will always produce the same return value. They are statistically invariant under rotation (i.e., no matter how the domain is rotated, it has the same statistical character). They have a statistical invariance under translation (i.e., no matter how the domain is translated, it has the same statistical character). They typically give different results under translation. The spatial frequency is narrowly concentrated, centered somewhere between 0.5 to 1.0. They are C1 continuous everywhere (i.e., the first derivative is continuous).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/noise.xhtml"}}},{"label":"noise2","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec2","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"noise1 , noise2 , noise3 and noise4 return noise values (vector or scalar) based on the input value x . The noise function is a stochastic function that can be used to increase visual complexity. Values returned by the noise functions give the appearance of randomness, but are not truly random. They are defined to have the following characteristics:The return value(s) are always in the range [-1.0,1.0], and cover at least the range [-0.6, 0.6], with a Gaussian-like distribution. The return value(s) have an overall average of 0.0. They are repeatable, in that a particular input value will always produce the same return value. They are statistically invariant under rotation (i.e., no matter how the domain is rotated, it has the same statistical character). They have a statistical invariance under translation (i.e., no matter how the domain is translated, it has the same statistical character). They typically give different results under translation. The spatial frequency is narrowly concentrated, centered somewhere between 0.5 to 1.0. They are C1 continuous everywhere (i.e., the first derivative is continuous).","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/noise.xhtml"}}},{"label":"normalize","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"v","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"normalize returns a vector with the same direction as its parameter, v , but with length 1.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/normalize.xhtml"}}},{"label":"not","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"bvec","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"not logically inverts the boolean vector x . It returns a new boolean vector for which each element i is computed as ! x [ i ] .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/not.xhtml"}}},{"label":"notEqual","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"bvec","description":"","parameters":[{"ty":"vec","label":"x","count":null,"description":""},{"ty":"vec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"ivec","label":"x","count":null,"description":""},{"ty":"ivec","label":"y","count":null,"description":""}]},{"returnType":"bvec","description":"","parameters":[{"ty":"uvec","label":"x","count":null,"description":""},{"ty":"uvec","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"notEqual returns a boolean vector in which each element i is computed as x [ i ] != y [ i ].","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/notEqual.xhtml"}}},{"label":"outerProduct","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"mat2","description":"","parameters":[{"ty":"vec2","label":"c","count":null,"description":""},{"ty":"vec2","label":"r","count":null,"description":""}]},{"returnType":"mat3","description":"","parameters":[{"ty":"vec3","label":"c","count":null,"description":""},{"ty":"vec3","label":"r","count":null,"description":""}]},{"returnType":"mat4","description":"","parameters":[{"ty":"vec4","label":"c","count":null,"description":""},{"ty":"vec4","label":"r","count":null,"description":""}]},{"returnType":"mat2x3","description":"","parameters":[{"ty":"vec3","label":"c","count":null,"description":""},{"ty":"vec2","label":"r","count":null,"description":""}]},{"returnType":"mat3x2","description":"","parameters":[{"ty":"vec2","label":"c","count":null,"description":""},{"ty":"vec3","label":"r","count":null,"description":""}]},{"returnType":"mat2x4","description":"","parameters":[{"ty":"vec4","label":"c","count":null,"description":""},{"ty":"vec2","label":"r","count":null,"description":""}]},{"returnType":"mat4x2","description":"","parameters":[{"ty":"vec2","label":"c","count":null,"description":""},{"ty":"vec4","label":"r","count":null,"description":""}]},{"returnType":"mat3x4","description":"","parameters":[{"ty":"vec4","label":"c","count":null,"description":""},{"ty":"vec3","label":"r","count":null,"description":""}]},{"returnType":"mat4x3","description":"","parameters":[{"ty":"vec3","label":"c","count":null,"description":""},{"ty":"vec4","label":"r","count":null,"description":""}]},{"returnType":"dmat2","description":"","parameters":[{"ty":"dvec2","label":"c","count":null,"description":""},{"ty":"dvec2","label":"r","count":null,"description":""}]},{"returnType":"dmat3","description":"","parameters":[{"ty":"dvec3","label":"c","count":null,"description":""},{"ty":"dvec3","label":"r","count":null,"description":""}]},{"returnType":"dmat4","description":"","parameters":[{"ty":"dvec4","label":"c","count":null,"description":""},{"ty":"dvec4","label":"r","count":null,"description":""}]},{"returnType":"dmat2x3","description":"","parameters":[{"ty":"dvec3","label":"c","count":null,"description":""},{"ty":"dvec2","label":"r","count":null,"description":""}]},{"returnType":"dmat3x2","description":"","parameters":[{"ty":"dvec2","label":"c","count":null,"description":""},{"ty":"dvec3","label":"r","count":null,"description":""}]},{"returnType":"dmat2x4","description":"","parameters":[{"ty":"dvec4","label":"c","count":null,"description":""},{"ty":"dvec2","label":"r","count":null,"description":""}]},{"returnType":"dmat4x2","description":"","parameters":[{"ty":"dvec2","label":"c","count":null,"description":""},{"ty":"dvec4","label":"r","count":null,"description":""}]},{"returnType":"dmat3x4","description":"","parameters":[{"ty":"dvec4","label":"c","count":null,"description":""},{"ty":"dvec3","label":"r","count":null,"description":""}]},{"returnType":"dmat4x3","description":"","parameters":[{"ty":"dvec3","label":"c","count":null,"description":""},{"ty":"dvec4","label":"r","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"outerProduct treats the first parameter c as a column vector (matrix with one column) and the second parameter r as a row vector (matrix with one row) and does a linear algebraic matrix multiply c * r , yielding a matrix whose number of rows is the number of components in c and whose number of columns is the number of components in r .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/outerProduct.xhtml"}}},{"label":"packDouble2x32","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"double","description":"","parameters":[{"ty":"uvec2","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packDouble2x32 packs the component of parameter v into a 64-bit value. If an IEEE-754 infinity or NaN is created, it will not signal and the resulting floating-point value is undefined. Otherwise, the bit-level representation of v is preserved. The first vector component ( v[0] ) specifies the 32 least significant bits of the result; the second component ( v[1] ) specifies the 32 most significant bits.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packDouble2x32.xhtml"}}},{"label":"packHalf2x16","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"vec2","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packHalf2x16 returns an unsigned integer obtained by converting the components of a two-component floating-point vector to the 16-bit floating-point representation found in the OpenGL Specification, and then packing these two 16-bit integers into a 32-bit unsigned integer. The first vector component specifies the 16 least-significant bits of the result; the second component specifies the 16 most-significant bits.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packHalf2x16.xhtml"}}},{"label":"packSnorm2x16","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"vec2","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packUnorm2x16 , packSnorm2x16 , packUnorm4x8 and packSnorm4x8 convert each component of the normalized floating-point value v into 8- or 16-bit integer values and then packs the results into a 32-bit unsigned integer.The conversion for component c of v to fixed-point is performed as follows: packUnorm2x16 : round ( clamp ( c , 0.0, 1.0) * 65535.0) packSnorm2x16 : round ( clamp ( c , -1.0, 1.0) * 32767.0) packUnorm4x8 : round ( clamp ( c , 0.0, 1.0) * 255.0) packSnorm4x8 : round ( clamp ( c , -1.0, 1.0) * 127.0)\n            The first component of the vector will be written to the least significant bits of the output;\n            the last component will be written to the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packUnorm.xhtml"}}},{"label":"packUnorm2x16","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"vec2","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packUnorm2x16 , packSnorm2x16 , packUnorm4x8 and packSnorm4x8 convert each component of the normalized floating-point value v into 8- or 16-bit integer values and then packs the results into a 32-bit unsigned integer.The conversion for component c of v to fixed-point is performed as follows: packUnorm2x16 : round ( clamp ( c , 0.0, 1.0) * 65535.0) packSnorm2x16 : round ( clamp ( c , -1.0, 1.0) * 32767.0) packUnorm4x8 : round ( clamp ( c , 0.0, 1.0) * 255.0) packSnorm4x8 : round ( clamp ( c , -1.0, 1.0) * 127.0)\n            The first component of the vector will be written to the least significant bits of the output;\n            the last component will be written to the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packUnorm.xhtml"}}},{"label":"packSnorm4x8","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"vec4","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packUnorm2x16 , packSnorm2x16 , packUnorm4x8 and packSnorm4x8 convert each component of the normalized floating-point value v into 8- or 16-bit integer values and then packs the results into a 32-bit unsigned integer.The conversion for component c of v to fixed-point is performed as follows: packUnorm2x16 : round ( clamp ( c , 0.0, 1.0) * 65535.0) packSnorm2x16 : round ( clamp ( c , -1.0, 1.0) * 32767.0) packUnorm4x8 : round ( clamp ( c , 0.0, 1.0) * 255.0) packSnorm4x8 : round ( clamp ( c , -1.0, 1.0) * 127.0)\n            The first component of the vector will be written to the least significant bits of the output;\n            the last component will be written to the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packUnorm.xhtml"}}},{"label":"packUnorm4x8","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uint","description":"","parameters":[{"ty":"vec4","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"packUnorm2x16 , packSnorm2x16 , packUnorm4x8 and packSnorm4x8 convert each component of the normalized floating-point value v into 8- or 16-bit integer values and then packs the results into a 32-bit unsigned integer.The conversion for component c of v to fixed-point is performed as follows: packUnorm2x16 : round ( clamp ( c , 0.0, 1.0) * 65535.0) packSnorm2x16 : round ( clamp ( c , -1.0, 1.0) * 32767.0) packUnorm4x8 : round ( clamp ( c , 0.0, 1.0) * 255.0) packSnorm4x8 : round ( clamp ( c , -1.0, 1.0) * 127.0)\n            The first component of the vector will be written to the least significant bits of the output;\n            the last component will be written to the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/packUnorm.xhtml"}}},{"label":"pow","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""},{"ty":"genType","label":"y","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"pow returns the value of $x$ raised to the $y$ power, i.e. $x^y$. The result is undefined if $x < 0$ or if $x = 0$ and $y \\leq 0$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/pow.xhtml"}}},{"label":"radians","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"degrees","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"radians converts a quantity specified in degrees into radians. The return value is ${ \\pi \\times degrees } \\over 180$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/radians.xhtml"}}},{"label":"reflect","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"I","count":null,"description":""},{"ty":"genType","label":"N","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"I","count":null,"description":""},{"ty":"genDType","label":"N","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"For a given incident vector I and surface normal N reflect returns the reflection direction calculated as I - 2.0 * dot ( N , I ) * N .N should be normalized in order to achieve the desired result.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/reflect.xhtml"}}},{"label":"refract","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"I","count":null,"description":""},{"ty":"genType","label":"N","count":null,"description":""},{"ty":"float","label":"eta","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"I","count":null,"description":""},{"ty":"genDType","label":"N","count":null,"description":""},{"ty":"float","label":"eta","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"For a given incident vector I , surface normal N and ratio of indices of refraction, eta , refract returns the refraction vector, R .R is calculated as:    k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n    if (k < 0.0)\n        R = genType(0.0);       // or genDType(0.0)\n    else\n        R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;The input parameters I and N should be normalized in order to achieve the desired result.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/refract.xhtml"}}},{"label":"round","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"round returns a value equal to the nearest integer to x . The fraction 0.5 will round in a direction chosen by the implementation, presumably the direction that is fastest. This includes the possibility that round ( x ) returns the same value as roundEven ( x ) for all values of x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/round.xhtml"}}},{"label":"roundEven","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"roundEven returns a value equal to the nearest integer to x . The fractional part of 0.5 will round toward the nearest even integer. For example, both 3.5 and 4.5 will round to 4.0.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/roundEven.xhtml"}}},{"label":"sign","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genIType","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"sign returns -1.0 if x is less than 0.0, 0.0 if x is equal to 0.0, and +1.0 if x is greater than 0.0.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/sign.xhtml"}}},{"label":"sin","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"angle","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"sin returns the trigonometric sine of angle .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/sin.xhtml"}}},{"label":"sinh","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"sinh returns the hyperbolic sine of x . The hyperbolic sine of x is computed as e x - e - x 2 .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/sinh.xhtml"}}},{"label":"smoothstep","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"edge0","count":null,"description":""},{"ty":"genType","label":"edge1","count":null,"description":""},{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"float","label":"edge0","count":null,"description":""},{"ty":"float","label":"edge1","count":null,"description":""},{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"edge0","count":null,"description":""},{"ty":"genDType","label":"edge1","count":null,"description":""},{"ty":"genDType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"double","label":"edge0","count":null,"description":""},{"ty":"double","label":"edge1","count":null,"description":""},{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"smoothstep performs smooth Hermite interpolation between 0 and 1 when edge0 < x < edge1 . This is useful in cases where a threshold function with a smooth transition is desired. smoothstep is equivalent to:    genType t;  /* Or genDType t; */\n    t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);Results are undefined if edge0 >= edge1 .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/smoothstep.xhtml"}}},{"label":"sqrt","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"sqrt returns the square root of $x$, i.e. the value $\\sqrt { x }$. The result is undefined if $x < 0$.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/sqrt.xhtml"}}},{"label":"step","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"edge","count":null,"description":""},{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genType","description":"","parameters":[{"ty":"float","label":"edge","count":null,"description":""},{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"edge","count":null,"description":""},{"ty":"genDType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"double","label":"edge","count":null,"description":""},{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"step generates a step function by comparing x to edge .For element i of the return value, 0.0 is returned if x [ i ] < edge [ i ], and 1.0 is returned otherwise.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/step.xhtml"}}},{"label":"tan","requirement":{"Glsl":{"stages":null,"min_version":110,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"angle","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"tan returns the trigonometric tangent of angle .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/tan.xhtml"}}},{"label":"tanh","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"tanh returns the hyperbolic tangent of x . The hyperbolic tangent of x is computed as sinh () x cosh () x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/tanh.xhtml"}}},{"label":"texelFetch","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerBuffer","label":"sampler","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DMS","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DMSArray","label":"sampler","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"sample","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"texelFetch performs a lookup of a single texel from texture coordinate P in the texture bound to sampler . The array layer is specified in the last component of P for array forms. The lod parameter (if present) specifies the level-of-detail from which the texel will be fetched. The sample specifies which sample within the texel will be returned when reading from a multi-sample texure.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/texelFetch.xhtml"}}},{"label":"texelFetchOffset","requirement":{"Glsl":{"stages":null,"min_version":150,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"int","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"ivec2","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"ivec3","label":"P","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"texelFetchOffset performs a lookup of a single texel from texture coordinate P in the texture bound to sampler . Before fetching the texel, the offset specified in offset is added to P . offset must be a constant expression. The array layer is specified in the last component of P for array forms. The lod parameter (if present) specifies the level-of-detail from which the texel will be fetched. The sample parameter specifies which sample within the texel will be returned when reading from a multi-sample texure.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/texelFetchOffset.xhtml"}}},{"label":"texture","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"samplerCubeArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"compare","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"texture samples texels from the texture bound to sampler at texture coordinate P . An optional bias, specified in bias is included in the level-of-detail computation that is used to choose mipmap(s) from which to sample.For shadow forms, when compare is present, it is used as D sub and the array layer is specified in P .w . When compare is not present, the last component of P is used as D sub and the array layer is specified in the second to last component of P . (The second component of P is unused for 1D shadow lookups.)For non-shadow variants, the array layer comes from the last component of P .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/texture.xhtml"}}},{"label":"textureGather","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"samplerCubeArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureGather returns the value:    vec4(Sample_i0_j1(P, base).comp,\n         Sample_i1_j1(P, base).comp,\n         Sample_i1_j0(P, base).comp,\n         Sample_i0_j0(P, base).comp);If specified, the value of comp must be a constant integer expression with a value of 0, 1, 2, or 3, identifying the x, y, z or w component of the four-component vector lookup result for each texel, respectively. If comp is not specified, it is treated as 0, selecting the x component of each texel to generate the result.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureGather.xhtml"}}},{"label":"textureGatherOffset","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureGatherOffset returns the value:    vec4(Sample_i0_j1(P + offset, base).comp,\n         Sample_i1_j1(P + offset, base).comp,\n         Sample_i1_j0(P + offset, base).comp,\n         Sample_i0_j0(P + offset, base).comp);It perfoms as textureGather but with offset applied as described in textureOffset , except that the implementation-dependent minimum and maximum offset values are given by GL_MIN_PROGRRAM_TEXTURE_GATHER_OFFSET and GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET , respectively.If specified, the value of comp must be a constant integer expression with a value of 0, 1, 2, or 3, identifying the x, y, z or w component of the four-component vector lookup result for each texel, respectively. If comp is not specified, it is treated as 0, selecting the x component of each texel to generate the result.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureGatherOffset.xhtml"}}},{"label":"textureGatherOffsets","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""},{"ty":"[int","label":"comp]","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""}]},{"returnType":"vec4","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"refZ","count":null,"description":""},{"ty":"ivec2","label":"offsets[4]","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureGatherOffsets operates identically to textureGatherOffset , except that offsets is used to determine the location of the four texels to sample. Each of the four texels is obtained by applying the offset in offsets as a (u, v) coordinate offset to P , identifying the four-texel GL_LINEAR footprint, and then selecting the texel i 0 i 0 of that footprint. The specified values in offsets must be set with constant integral expressions.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureGatherOffsets.xhtml"}}},{"label":"textureGrad","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureGrad performs a texture lookup at coordinate P from the texture bound to sampler with explicit texture coordinate gradiends as specified in dPdx and dPdy . Set:Δs Δx = ΔP Δx for a 1D texture, ΔP.s Δx otherwiseΔs Δy = ΔP Δy for a 1D texture, ΔP.s Δy otherwiseΔt Δx = 0.0 for a 1D texture, ΔP.t Δx otherwiseΔt Δy = 0.0 for a 1D texture, ΔP.t Δy otherwiseΔr Δx = 0.0 for a 1D or 2D texture, ΔP.p Δx otherwiseΔr Δy = 0.0 for a 1D or 2D texture, ΔP.p Δy otherwiseFor the cube version, the partial derivatives of P are assumed to be in the coordinate system used before texture coordinates are projected onto the appropriate cube face.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureGrad.xhtml"}}},{"label":"textureGradOffset","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureGradOffset performs a texture lookup at coordinate P from the texture bound to sampler with explicit texture coordinate gradiends as specified in dPdx and dPdy . An explicit offset is also supplied in offset . textureGradOffset consumes dPdx and dPdy as textureGrad and offset as textureOffset .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureGradOffset.xhtml"}}},{"label":"textureLod","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureLod performs a texture lookup at coordinate P from the texture bound to sampler with an explicit level-of-detail as specified in lod . lod specifies Λ base and sets the partial derivatives as follows:Δ u Δ x = 0 , Δ v Δ x = 0 , Δ w Δ x = 0 Δ u Δ y = 0 , Δ v Δ y = 0 , Δ w Δ y = 0","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureLod.xhtml"}}},{"label":"textureLodOffset","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureLodOffset performs a texture lookup at coordinate P from the texture bound to sampler with an explicit level-of-detail as specified in lod . Behavior is the same as in textureLod except that before sampling, offset is added to P .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureLodOffset.xhtml"}}},{"label":"textureOffset","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureOffset performs a texture lookup at coordinate P from the texture bound to sampler with an additional offset, specified in texels in offset that will be applied to the (u, v, w) texture coordinates before looking up each texel. The offset value must be a constant expression. A limited range of offset values are supported; the minimum and maximum offset values are implementation-dependent and may be determined by querying GL_MIN_PROGRAM_TEXEL_OFFSET and GL_MAX_PROGRAM_TEXEL_OFFSET , respectively.Note that offset does not apply to the layer coordinate for texture arrays. Also note that offsets are not supported for cube maps.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureOffset.xhtml"}}},{"label":"textureProj","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProj performs a texture lookup with projection. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in texture .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProj.xhtml"}}},{"label":"textureProjGrad","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"pDx","count":null,"description":""},{"ty":"float","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"pDx","count":null,"description":""},{"ty":"float","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec3","label":"pDx","count":null,"description":""},{"ty":"vec3","label":"pDy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"pDx","count":null,"description":""},{"ty":"float","label":"pDy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"pDx","count":null,"description":""},{"ty":"vec2","label":"pDy","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProjGrad performs a texture lookup with projection and explicit gradients. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in textureGrad , passing dPdx and dPdy as gradients.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProjGrad.xhtml"}}},{"label":"textureProjGradOffset","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec3","label":"dPdx","count":null,"description":""},{"ty":"vec3","label":"dPdy","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"dPdx","count":null,"description":""},{"ty":"float","label":"dPdy","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"vec2","label":"dPdx","count":null,"description":""},{"ty":"vec2","label":"dPdy","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProjGradOffset performs a texture lookup with projection and explicit gradients and offsets. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in textureGradOffset , passing dPdx and dPdy as gradients, and offset as the offset.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProjGradOffset.xhtml"}}},{"label":"textureProjLod","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProjLod performs a texture lookup with projection from an explicitly specified level-of-detail. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in textureLod , with lod used to specify the level-of-detail from which the texture will be sampled.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProjLod.xhtml"}}},{"label":"textureProjLodOffset","requirement":{"Glsl":{"stages":null,"min_version":130,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"float","label":"lod","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProjLodOffset performs a texture lookup with projection from an explicitly specified level-of-detail with an offset applied to the texture coordinates before sampling. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in textureLodOffset , with lod used to specify the level-of-detail from which the texture will be sampled and offset used to specifiy the offset, in texels, to be applied to the texture coordinates before sampling.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProjLodOffset.xhtml"}}},{"label":"textureProjOffset","requirement":{"Glsl":{"stages":null,"min_version":140,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec3","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"int","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""},{"ty":"[float ]","label":"bias","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"gvec4","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]},{"returnType":"float","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""},{"ty":"vec4","label":"P","count":null,"description":""},{"ty":"ivec2","label":"offset","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureProjOffset performs a texture lookup with projection. The texture coordinates consumed from P , not including the last component of P , are divided by the last component of P . The resulting 3 rd component of P in the shadow forms is used as D ref . After these values are computed, the texture lookup proceeds as in textureOffset , with the offset used to offset the computed texture coordinates.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureProjOffset.xhtml"}}},{"label":"textureQueryLevels","requirement":{"Glsl":{"stages":null,"min_version":430,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"samplerCubeArrayShadow","label":"sampler","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureQueryLevels returns the number of accessible mipmap levels in the texture associated with sampler .If called on an incomplete texture, or if no texture is associated with sampler , zero is returned.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureQueryLevels.xhtml"}}},{"label":"textureQueryLod","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec2","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"gsamplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"float","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec2","label":"P","count":null,"description":""}]},{"returnType":"vec2","description":"","parameters":[{"ty":"samplerCubeArrayShadow","label":"sampler","count":null,"description":""},{"ty":"vec3","label":"P","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"Available only in the fragment shader , textureQueryLod computes the level-of-detail that would be used to sample from a texture. The mipmap array(s) that would be accessed is returned in the x component of the return value. The computed level-of-detail relative to the base level is returned in the y component of the return value.\n            If called on an incomplete texture, the result of the operation is undefined.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureQueryLod.xhtml"}}},{"label":"textureSamples","requirement":{"Glsl":{"stages":null,"min_version":450,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"gsampler2DMS","label":"sampler","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsampler2DMSArray","label":"sampler","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureSamples returns the number of samples per texel of the texture bound to sampler .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureSamples.xhtml"}}},{"label":"textureSize","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"int","description":"","parameters":[{"ty":"gsampler1D","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gsampler2D","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gsampler3D","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gsamplerCube","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"sampler1DShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"sampler2DShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"samplerCubeShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"samplerCubeArray","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"samplerCubeArrayShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gsampler2DRect","label":"sampler","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"sampler2DRectShadow","label":"sampler","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gsampler1DArray","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gsampler2DArray","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"sampler1DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"sampler2DArrayShadow","label":"sampler","count":null,"description":""},{"ty":"int","label":"lod","count":null,"description":""}]},{"returnType":"int","description":"","parameters":[{"ty":"gsamplerBuffer","label":"sampler","count":null,"description":""}]},{"returnType":"ivec2","description":"","parameters":[{"ty":"gsampler2DMS","label":"sampler","count":null,"description":""}]},{"returnType":"ivec3","description":"","parameters":[{"ty":"gsampler2DMSArray","label":"sampler","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"textureSize returns the dimensions of level lod (if present) of the texture bound to sampler . The components in the return value are filled in, in order, with the width, height and depth of the texture. For the array forms, the last component of the return value is the number of layers in the texture array.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/textureSize.xhtml"}}},{"label":"transpose","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"mat2","description":"","parameters":[{"ty":"mat2","label":"m","count":null,"description":""}]},{"returnType":"mat3","description":"","parameters":[{"ty":"mat3","label":"m","count":null,"description":""}]},{"returnType":"mat4","description":"","parameters":[{"ty":"mat4","label":"m","count":null,"description":""}]},{"returnType":"mat2x3","description":"","parameters":[{"ty":"mat3x2","label":"m","count":null,"description":""}]},{"returnType":"mat2x4","description":"","parameters":[{"ty":"mat4x2","label":"m","count":null,"description":""}]},{"returnType":"mat3x2","description":"","parameters":[{"ty":"mat2x3","label":"m","count":null,"description":""}]},{"returnType":"mat3x4","description":"","parameters":[{"ty":"mat4x3","label":"m","count":null,"description":""}]},{"returnType":"mat4x2","description":"","parameters":[{"ty":"mat2x4","label":"m","count":null,"description":""}]},{"returnType":"mat4x3","description":"","parameters":[{"ty":"mat3x4","label":"m","count":null,"description":""}]},{"returnType":"dmat2","description":"","parameters":[{"ty":"dmat2","label":"m","count":null,"description":""}]},{"returnType":"dmat3","description":"","parameters":[{"ty":"dmat3","label":"m","count":null,"description":""}]},{"returnType":"dmat4","description":"","parameters":[{"ty":"dmat4","label":"m","count":null,"description":""}]},{"returnType":"dmat2x3","description":"","parameters":[{"ty":"dmat3x2","label":"m","count":null,"description":""}]},{"returnType":"dmat2x4","description":"","parameters":[{"ty":"dmat4x2","label":"m","count":null,"description":""}]},{"returnType":"dmat3x2","description":"","parameters":[{"ty":"dmat2x3","label":"m","count":null,"description":""}]},{"returnType":"dmat3x4","description":"","parameters":[{"ty":"dmat4x3","label":"m","count":null,"description":""}]},{"returnType":"dmat4x2","description":"","parameters":[{"ty":"dmat2x4","label":"m","count":null,"description":""}]},{"returnType":"dmat4x3","description":"","parameters":[{"ty":"dmat3x4","label":"m","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"transpose returns the transpose of the matrix m .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/transpose.xhtml"}}},{"label":"trunc","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genType","description":"","parameters":[{"ty":"genType","label":"x","count":null,"description":""}]},{"returnType":"genDType","description":"","parameters":[{"ty":"genDType","label":"x","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"trunc returns a value equal to the nearest integer to x whose absolute value is not larger than the absolute value of x .","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/trunc.xhtml"}}},{"label":"uaddCarry","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""},{"ty":"out genUType","label":"carry","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"uaddCarry adds two 32-bit unsigned integer variables (scalars or vectors) and generates a 32-bit unsigned integer result, along with a carry output. The result is the sum of x and y modulo 2 32 . The value carry is set to 0 if the sum is less than 2 32 and to 1 otherwise.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/uaddCarry.xhtml"}}},{"label":"imulExtended","requirement":null,"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[{"ty":"genIType","label":"x","count":null,"description":""},{"ty":"genIType","label":"y","count":null,"description":""},{"ty":"out genIType","label":"msb","count":null,"description":""},{"ty":"out genIType","label":"lsb","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"umulExtended and imulExtended perform multiplication of the two 32-bit integer quantities x and y , producing a 64-bit integer result. The 32 least significant bits of this product are returned in lsb and the 32 most significant bits are returned in msb . umulExtended and imulExtended perform unsigned and signed multiplication, respectively.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/umulExtended.xhtml"}}},{"label":"umulExtended","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"void","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""},{"ty":"out genUType","label":"msb","count":null,"description":""},{"ty":"out genUType","label":"lsb","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"umulExtended and imulExtended perform multiplication of the two 32-bit integer quantities x and y , producing a 64-bit integer result. The 32 least significant bits of this product are returned in lsb and the 32 most significant bits are returned in msb . umulExtended and imulExtended perform unsigned and signed multiplication, respectively.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/umulExtended.xhtml"}}},{"label":"unpackDouble2x32","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"uvec2","description":"","parameters":[{"ty":"double","label":"d","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackDouble2x32 returns a two-component unsigned integer vector representation of d . The bit-level representation of d is preserved. The first component of the returned vector contains the 32 least significant bits of the double; the second component consists the 32 most significant bits.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackDouble2x32.xhtml"}}},{"label":"unpackHalf2x16","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec2","description":"","parameters":[{"ty":"uint","label":"v","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackHalf2x16 returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values, interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification, and converting them to 32-bit floating-point values. The first component of the vector is obtained from the 16 least-significant bits of v; the second component is obtained from the 16 most-significant bits of v.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackHalf2x16.xhtml"}}},{"label":"unpackUnorm4x8","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec4","description":"","parameters":[{"ty":"uint","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackUnorm2x16 , unpackSnorm2x16 , unpackUnorm4x8 and unpackSnorm4x8 unpack single 32-bit unsigned integers, specified in the parameter p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.The conversion for unpacked fixed point value f to floating-point is performed as follows: packUnorm2x16 : f / 65535.0 packSnorm2x16 : clamp (f / 32727.0, -1.0, 1.0) packUnorm4x8 : f / 255.0 packSnorm4x8 : clamp (f / 127.0, -1.0, 1.0)\n            The first component of the returned vector will be extracted from the least significant bits of the input;\n            the last component will be extracted from the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml"}}},{"label":"unpackUnorm2x16","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec2","description":"","parameters":[{"ty":"uint","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackUnorm2x16 , unpackSnorm2x16 , unpackUnorm4x8 and unpackSnorm4x8 unpack single 32-bit unsigned integers, specified in the parameter p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.The conversion for unpacked fixed point value f to floating-point is performed as follows: packUnorm2x16 : f / 65535.0 packSnorm2x16 : clamp (f / 32727.0, -1.0, 1.0) packUnorm4x8 : f / 255.0 packSnorm4x8 : clamp (f / 127.0, -1.0, 1.0)\n            The first component of the returned vector will be extracted from the least significant bits of the input;\n            the last component will be extracted from the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml"}}},{"label":"unpackSnorm2x16","requirement":{"Glsl":{"stages":null,"min_version":420,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec2","description":"","parameters":[{"ty":"uint","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackUnorm2x16 , unpackSnorm2x16 , unpackUnorm4x8 and unpackSnorm4x8 unpack single 32-bit unsigned integers, specified in the parameter p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.The conversion for unpacked fixed point value f to floating-point is performed as follows: packUnorm2x16 : f / 65535.0 packSnorm2x16 : clamp (f / 32727.0, -1.0, 1.0) packUnorm4x8 : f / 255.0 packSnorm4x8 : clamp (f / 127.0, -1.0, 1.0)\n            The first component of the returned vector will be extracted from the least significant bits of the input;\n            the last component will be extracted from the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml"}}},{"label":"unpackSnorm4x8","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"vec4","description":"","parameters":[{"ty":"uint","label":"p","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"unpackUnorm2x16 , unpackSnorm2x16 , unpackUnorm4x8 and unpackSnorm4x8 unpack single 32-bit unsigned integers, specified in the parameter p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.The conversion for unpacked fixed point value f to floating-point is performed as follows: packUnorm2x16 : f / 65535.0 packSnorm2x16 : clamp (f / 32727.0, -1.0, 1.0) packUnorm4x8 : f / 255.0 packSnorm4x8 : clamp (f / 127.0, -1.0, 1.0)\n            The first component of the returned vector will be extracted from the least significant bits of the input;\n            the last component will be extracted from the most significant bits.\n        ","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/unpackUnorm.xhtml"}}},{"label":"usubBorrow","requirement":{"Glsl":{"stages":null,"min_version":400,"extension":null}},"data":{"Functions":{"signatures":[{"returnType":"genUType","description":"","parameters":[{"ty":"genUType","label":"x","count":null,"description":""},{"ty":"genUType","label":"y","count":null,"description":""},{"ty":"out genUType","label":"borrow","count":null,"description":""}]}]}},"mode":{"Intrinsic":{"description":"usubBorrow subtracts two 32-bit unsigned integer variables (scalars or vectors) and generates a 32-bit unsigned integer result, along with a borrow output. The result is the difference of x and y if non-negative, or 2 32 plus that difference otherwise. The value borrow is set to 0 if x >= y and to 1 otherwise.","link":"https://registry.khronos.org/OpenGL-Refpages/gl4/html/usubBorrow.xhtml"}}}],"keywords":[{"label":"uniform","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Declare an uniform variable","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"layout","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"const","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"constant qualifier","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"struct","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"in","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Mark a function parameter as an input","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"out","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Mark a function parameter as an output","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"inout","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Mark a function parameter as both an input and output","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"flat","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"The value will not be interpolated. The value given to the fragment shader is the value from the Provoking Vertex for that primitive.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"noperspective","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"The value will be linearly interpolated in window-space. This is usually not what you want, but it can have its uses.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"smooth","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"The value will be interpolated in a perspective-correct fashion. This is the default if no qualifier is present.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"precision","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Choose the precision of the given type. Possible values are highp, mediump, lowp. Only float and uint supported.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"highp","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"High precision modifier","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"mediump","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Medium precision modifier","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"lowp","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Low precision modifier","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"coherent","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Using this qualifier is required to allow dependent shader invocations to communicate with one another, as it enforces the coherency of memory accesses. Using this requires the appropriate memory barriers to be executed, so that visibility can be achieved.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"volatile","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"The compiler normally is free to assume that values accessed through variables will only change after memory barriers or other synchronization. With this qualifier, the compiler assumes that the contents of the storage represented by the variable could be changed at any time.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"restrict","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Normally, the compiler must assume that you could access the same image/buffer object through separate variables in the same shader. Therefore, if you write to one variable, and read from a second, the compiler assumes that it is possible that you could be reading the value you just wrote. With this qualifier, you are telling the compiler that this particular variable is the only variable that can modify the memory visible through that variable within this shader invocation (other shader stages don't count here). This allows the compiler to optimize reads/writes better. You should use this wherever possible.","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"readonly","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Normally, the compiler allows you to read and write from variables as you wish. If you use this, the variable can only be used for reading operations (atomic operations are forbidden as they also count as writes).","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"writeonly","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"Normally, the compiler allows you to read and write from variables as you wish. If you use this, the variable can only be used for writing operations (atomic operations are forbidden as they also count as reads).","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"invariant","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"if","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"else","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"while","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"for","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"break","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"switch","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"long","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"typedef","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"unsigned","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}},{"label":"signed","requirement":null,"data":{"Keyword":{}},"mode":{"Intrinsic":{"description":"","link":"https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)"}}}],"macros":[],"includes":[]}