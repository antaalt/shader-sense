name: Build Extension

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]
    workflow_call:

env:
  CARGO_TERM_COLOR: always

jobs:
  
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.89
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --check
      # Download dxc dll for tests.
      - name: Download dxc dll.
        uses: robinraju/release-downloader@v1.11
        with:
          repository: 'microsoft/DirectXShaderCompiler'
          tag: v1.8.2405
          fileName: 'dxc_2024_05_24.zip'
          extract: true
          out-file-path: './dxc'
      - name: Create target folder
        run: mkdir -p ./target/debug
      - name: Copy dxc dll to target folder for tests.
        run: cp ./dxc/bin/x64/dxcompiler.dll ./target/debug/dxcompiler.dll && cp ./dxc/bin/x64/dxil.dll ./target/debug/dxil.dll
      - name: Run tests
        run: cargo test --verbose # Test all package on windows.

  build-desktop:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
          include:
            # All rust analyzer supported targets that we could support: 
            # https://github.com/rust-lang/rust-analyzer/blob/master/.github/workflows/release.yaml
            # But Dxc does not support them all, so only use the one DXC support, 
            # else fallback to WASI server which is supported everywhere.
            # WASI has its own build step below.
            - os: windows-latest
              target: x86_64-pc-windows-msvc
              executable: shader-language-server.exe
            - os: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              executable: shader-language-server

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }} # Make Rust compile to our target (defined in the matrix)
      - name: Build desktop executable  # Build all package on supported os.
        run: cargo build --release --verbose --target ${{ matrix.target }} # Specify target to build into target
      - name: Copy desktop executable
        run: mkdir -p ./bin/ && cp ./target/${{ matrix.target }}/release/${{ matrix.executable }} ./bin/${{ matrix.executable }}
      # TODO: Add debug symbols for supported target to bin folder.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shader-language-server-${{ matrix.target }}
          path: ./bin/

  # Separate build task as its more complex.  
  build-wasi:
    runs-on: ubuntu-latest

    # Build WASM from source.
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: robinraju/release-downloader@v1.11
        with:
          repository: 'WebAssembly/wasi-sdk'
          tag: 'wasi-sdk-24'
          fileName: 'wasi-sysroot-24.0.tar.gz'
          extract: true
      - name: Setup WASI_SYSROOT
        run: |
              echo "WASI_SYSROOT=$(echo $GITHUB_WORKSPACE)/wasi-sysroot-24.0/" >> $GITHUB_ENV
              echo $WASI_SYSROOT
              ls -f $WASI_SYSROOT
      - name: Download latest clang
        run: |
              sudo apt update
              wget https://apt.llvm.org/llvm.sh
              chmod +x ./llvm.sh
              sudo ./llvm.sh 17
              clang --version
              clang-17 --version
      - name: Add target
        run: rustup target add wasm32-wasip1-threads
      - name: Test WASI # Test only server & main library on WASI. Skip doc test as they are already done and somehow get OOM.
        run: cargo install wasmtime-cli && cargo test --package shader_language_server --package shader-sense --all-targets --target wasm32-wasip1-threads -- --nocapture
        env: # Somehow this VM has clang14 by default, which is not supported...
          CC: clang-17
          CXX: clang++-17
      - name: Build WASI executable # Build only server on WASI
        run: cargo build --package shader_language_server --release --target wasm32-wasip1-threads --verbose
        env: # Somehow this VM has clang14 by default, which is not supported...
          CC: clang-17
          CXX: clang++-17
      - name: Copy WASI executables
        run: mkdir -p ./bin/ && cp ./target/wasm32-wasip1-threads/release/shader-language-server.wasm ./bin/shader-language-server.wasm
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shader-language-server-wasm32-wasip1-threads
          path: ./bin/